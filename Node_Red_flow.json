[
    {
        "id": "c072a6bbe1d49f83",
        "type": "tab",
        "label": "Telegram Bot",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "039aea97a5440b0f",
        "type": "tab",
        "label": "Home Automation",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b5164099a5347bce",
        "type": "subflow",
        "name": "Clock Timing",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "font-awesome/fa-hourglass-2"
    },
    {
        "id": "662c20e8e73bc9f7",
        "type": "subflow",
        "name": "Read file",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 180,
                "y": 180,
                "wires": [
                    {
                        "id": "d40ef91e6caba179"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 980,
                "y": 160,
                "wires": [
                    {
                        "id": "c5b4596c260b608a",
                        "port": 0
                    }
                ]
            },
            {
                "x": 980,
                "y": 200,
                "wires": [
                    {
                        "id": "da25ef888fd99083",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#D7D7A0",
        "icon": "font-awesome/fa-folder-open"
    },
    {
        "id": "4f8d97d10d4ce0bd",
        "type": "subflow",
        "name": "HIDDEN commands",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#D8BFD8",
        "icon": "font-awesome/fa-wrench"
    },
    {
        "id": "9a353933505ea477",
        "type": "subflow",
        "name": "Evaluate User",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 140,
                "wires": [
                    {
                        "id": "5b89d198b0185ae4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 680,
                "y": 60,
                "wires": [
                    {
                        "id": "d44fa343ef908753",
                        "port": 0
                    }
                ]
            },
            {
                "x": 680,
                "y": 100,
                "wires": [
                    {
                        "id": "d44fa343ef908753",
                        "port": 1
                    }
                ]
            },
            {
                "x": 680,
                "y": 140,
                "wires": [
                    {
                        "id": "d44fa343ef908753",
                        "port": 2
                    }
                ]
            },
            {
                "x": 680,
                "y": 180,
                "wires": [
                    {
                        "id": "d44fa343ef908753",
                        "port": 3
                    },
                    {
                        "id": "b9c2d8c287d49485",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#C7E9C0",
        "icon": "font-awesome/fa-user-o"
    },
    {
        "id": "52d4d9c1321f5cd4",
        "type": "group",
        "z": "039aea97a5440b0f",
        "name": "MQTT",
        "style": {
            "stroke": "#ffC000",
            "fill": "#ffC000",
            "fill-opacity": "0.3",
            "label": true
        },
        "nodes": [
            "f95df4783e39e6b2",
            "c493f064016519ed",
            "df4c0762f9defbd0"
        ],
        "x": 1504,
        "y": 2259,
        "w": 422,
        "h": 82
    },
    {
        "id": "0f5db796f4cf57cf",
        "type": "telegram bot",
        "botname": "iot_berna_bot",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "100",
        "usesocks": false,
        "sockshost": "",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "0fe9aca1cc0c82ad",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "true",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "001ce7074b9d1e40",
        "type": "alexa-home-conf",
        "username": "oleoso_99"
    },
    {
        "id": "cdfd7fe8c4484812",
        "type": "server",
        "name": "Home Assistant",
        "version": 2,
        "addon": false,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "y|yes|true|on|home|open",
        "connectionDelay": false,
        "cacheJson": true,
        "heartbeat": false,
        "heartbeatInterval": "30"
    },
    {
        "id": "2f02e5d0bc36ef68",
        "type": "mqtt-broker",
        "name": "RaspBerna",
        "broker": "2.230.199.15",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "a69fcae04a14d171",
        "type": "mqtt-broker",
        "name": "ThingSpeak",
        "broker": "mqtt3.thingspeak.com",
        "port": "1883",
        "clientid": "MDkNAhUfKxgNMzEGHx8IDgA",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "310672a6aaf68a06",
        "type": "simpletime",
        "z": "b5164099a5347bce",
        "name": "TIME",
        "mydate": false,
        "myymd": false,
        "myyear": true,
        "mymonth": true,
        "mymonthn": true,
        "mydom": true,
        "mydoy": false,
        "myday": true,
        "myhourpm": false,
        "myhour": true,
        "mytime": true,
        "mytimes": false,
        "myminute": true,
        "myminutes": false,
        "mysecond": false,
        "mymillis": false,
        "myepoch": false,
        "myrawdate": false,
        "mypm": false,
        "x": 410,
        "y": 100,
        "wires": [
            [
                "22b3bb8a0c5401ed"
            ]
        ]
    },
    {
        "id": "ab394c9704f70da2",
        "type": "inject",
        "z": "b5164099a5347bce",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 100,
        "wires": [
            [
                "310672a6aaf68a06"
            ]
        ]
    },
    {
        "id": "529a6b1b2a97b390",
        "type": "function",
        "z": "b5164099a5347bce",
        "name": "TIME_VAR_CREATION",
        "func": "global.set(\"MY_YEAR\", msg.myyear)\nglobal.set(\"MY_MONTH\", msg.mymonth)\nglobal.set(\"MY_MONTH_N\", msg.mymonthn)\nglobal.set(\"MY_DOM\", msg.mydom)\nglobal.set(\"MY_DAY\", msg.myday)\nglobal.set(\"MY_HOUR\", msg.myhour)\nglobal.set(\"MY_MINUTE\", msg.myminute)\nglobal.set(\"MY_TIME\", msg.mytime)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "22b3bb8a0c5401ed",
        "type": "rbe",
        "z": "b5164099a5347bce",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 530,
        "y": 100,
        "wires": [
            [
                "529a6b1b2a97b390"
            ]
        ]
    },
    {
        "id": "65e1b043f68a3f89",
        "type": "file in",
        "z": "662c20e8e73bc9f7",
        "name": "",
        "filename": "/home/lberna/Desktop/chatId.txt",
        "format": "lines",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 570,
        "y": 160,
        "wires": [
            [
                "18ce8110818c8d90"
            ]
        ]
    },
    {
        "id": "d40ef91e6caba179",
        "type": "fs-ops-access",
        "z": "662c20e8e73bc9f7",
        "name": "Check if file exists",
        "path": "/home/lberna/Desktop",
        "pathType": "str",
        "filename": "chatId.txt",
        "filenameType": "str",
        "read": true,
        "write": true,
        "throwerror": false,
        "x": 310,
        "y": 180,
        "wires": [
            [
                "65e1b043f68a3f89"
            ],
            [
                "da25ef888fd99083"
            ]
        ]
    },
    {
        "id": "da25ef888fd99083",
        "type": "file",
        "z": "662c20e8e73bc9f7",
        "name": "Create file",
        "filename": "/home/lberna/Desktop/chatId.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 510,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "c5b4596c260b608a",
        "type": "json",
        "z": "662c20e8e73bc9f7",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 890,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "18ce8110818c8d90",
        "type": "function",
        "z": "662c20e8e73bc9f7",
        "name": "trim",
        "func": "if(msg.payload == \"\\n\" || msg.payload == \"\\r\" || msg.payload == \"\" ){\n    return;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 160,
        "wires": [
            [
                "c5b4596c260b608a"
            ]
        ]
    },
    {
        "id": "3a3257d81c0ae4b6",
        "type": "telegram command",
        "z": "4f8d97d10d4ce0bd",
        "name": "🔴DEPLOY",
        "command": "/deploy",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "0f5db796f4cf57cf",
        "strict": false,
        "hasresponse": false,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 1,
        "x": 170,
        "y": 160,
        "wires": [
            [
                "e3ec77d5b81dcc6b"
            ]
        ]
    },
    {
        "id": "e3ec77d5b81dcc6b",
        "type": "function",
        "z": "4f8d97d10d4ce0bd",
        "name": "is Admin?",
        "func": "var message = msg\n\nvar name = message.originalMessage.from.first_name;\nvar user = message.originalMessage.from.username;\nvar id = message.payload.chatId;\nflow.set(\"Users_number\", 0);\n\nnode.log(\"Command: \"+ msg.originalMessage.text +\" requested by \"+ user)\n\n\nvar fileUsr = {\n        \"Name\" : name,\n        \"Username\": user,\n        \"chatId\": id\n}\nflow.set(\"fileUser\",fileUsr);\n    \nvar ad = 0;\n\nfor(var i = 0; i<3 ; i++){\n    //node.warn(flow.get(\"admins\")[i])\n    if(global.get(\"admins\")[i] == fileUsr.chatId)\n        ad = 1;\n}\n\nif(ad == 1){\n    node.log(\"ADMIN\")\n    msg.payload.content = \"🔄Restarting Node-Red🔄\"\n    return [msg,null];\n}\nelse{\n    node.log(\"NOT ADMIN\")\n    msg.payload.content = \"🚫\" + fileUsr.Name+\" you are not an Admin, you cannot access this resource!\"\n    return [null,msg];\n}\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 160,
        "wires": [
            [
                "8bb6b635657730e3"
            ],
            [
                "06acd7cb76562d05"
            ]
        ]
    },
    {
        "id": "06acd7cb76562d05",
        "type": "telegram sender",
        "z": "4f8d97d10d4ce0bd",
        "name": "Not Admin - Access Denied",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 540,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "8bb6b635657730e3",
        "type": "telegram sender",
        "z": "4f8d97d10d4ce0bd",
        "name": "Restart",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 480,
        "y": 120,
        "wires": [
            [
                "b4a2485abe65bbff"
            ]
        ]
    },
    {
        "id": "f59009e8fa472dfa",
        "type": "comment",
        "z": "4f8d97d10d4ce0bd",
        "name": "/deploy restarts node-red process",
        "info": "For bugs and all type of problems",
        "x": 130,
        "y": 80,
        "wires": []
    },
    {
        "id": "b4a2485abe65bbff",
        "type": "exec",
        "z": "4f8d97d10d4ce0bd",
        "command": "node-red-restart",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 640,
        "y": 120,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "940adb8afb8e832a",
        "type": "telegram command",
        "z": "4f8d97d10d4ce0bd",
        "name": "🔴DELETE",
        "command": "/delete",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "0f5db796f4cf57cf",
        "strict": false,
        "hasresponse": false,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 1,
        "x": 170,
        "y": 440,
        "wires": [
            [
                "cba178e0698e2122"
            ]
        ]
    },
    {
        "id": "cba178e0698e2122",
        "type": "function",
        "z": "4f8d97d10d4ce0bd",
        "name": "is Admin?",
        "func": "var message = msg\nflow.set(\"deleteMsg\", message);\nflow.set(\"last\", message);\n\nvar name = message.originalMessage.from.first_name;\nvar user = message.originalMessage.from.username;\nvar id = message.payload.chatId;\n\nnode.log(\"Command: \"+ msg.originalMessage.text +\" requested by \"+ user)\n\nvar deleteUsr = {\n        \"Name\" : name,\n        \"Username\": user,\n        \"chatId\": id\n}\nflow.set(\"deleteUsr\",deleteUsr);\nflow.set(\"numUs\", 0)\n    \nvar ad = 0;\n\nfor(var i = 0; i<3 ; i++){\n    //node.warn(flow.get(\"admins\")[i])\n    if(global.get(\"admins\")[i] == deleteUsr.chatId)\n        ad = 1;\n}\n\nif(ad == 1){\n    node.log(\"ADMIN\")\n    return [msg,null];\n}\nelse{\n    node.log(\"NOT ADMIN\")\n    msg.payload.content = \"🚫\" + deleteUsr.Name+\" you are not an Admin, you cannot access this resource!\"\n    return [null,msg];\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 440,
        "wires": [
            [
                "0b6a6d5d868babf7"
            ],
            [
                "efae4bb988c2e57c"
            ]
        ]
    },
    {
        "id": "efae4bb988c2e57c",
        "type": "telegram sender",
        "z": "4f8d97d10d4ce0bd",
        "name": "Not Admin - Access Denied",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 540,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "c6b0dc9b53b4c412",
        "type": "join",
        "z": "4f8d97d10d4ce0bd",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload.counter",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "2",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 770,
        "y": 380,
        "wires": [
            [
                "59d27e9d190be987"
            ]
        ]
    },
    {
        "id": "59d27e9d190be987",
        "type": "function",
        "z": "4f8d97d10d4ce0bd",
        "name": "Dynamic inline Keyboard of Users",
        "func": "context.flow.deleting = { messageId : msg.payload.messageId };\nflow.set(\"arrayUsr\", msg);\n\nvar num = flow.get(\"numUs\");\nvar i = 1;\nvar str = \"{\\\"inline_keyboard\\\": \\n[\";\n\nwhile(i<=num){\n    str +=\n            \"[{\"\n            +  \"\\\"text\\\":\" + \"\\\"\" +msg.payload[i].Name +\"\\\"\" + \",\"\n            +  \"\\\"callback_data\\\":\" + \"\\\"\" + msg.payload[i].Username +\"\\\"\" \n            + \"}]\"\n            + \",\\n\"\n    i++\n}\nstr = str.slice(0, str.length-2);\n\nstr += \"]}\";\n\nmsg = flow.get(\"deleteMsg\");\nmsg.payload.content = 'Which User do you want do DELETE?';\nmsg.payload.options ={ \n            reply_markup : str, \n};\n\nflow.set(\"keyboard\", msg.payload);\n\nreturn [msg];\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"sent\", 0)\n",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 380,
        "wires": [
            [
                "caa67a22e9f46dc9"
            ]
        ]
    },
    {
        "id": "caa67a22e9f46dc9",
        "type": "telegram sender",
        "z": "4f8d97d10d4ce0bd",
        "name": "Send Delete Users List",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1240,
        "y": 380,
        "wires": [
            [
                "6ee7898848f1a79c"
            ]
        ]
    },
    {
        "id": "d6a6a18ce7cc6321",
        "type": "comment",
        "z": "4f8d97d10d4ce0bd",
        "name": "Reply to /delete",
        "info": "",
        "x": 80,
        "y": 360,
        "wires": []
    },
    {
        "id": "0b6a6d5d868babf7",
        "type": "subflow:662c20e8e73bc9f7",
        "z": "4f8d97d10d4ce0bd",
        "name": "",
        "x": 480,
        "y": 400,
        "wires": [
            [
                "df10ef1a29a41fce"
            ],
            [
                "7eb81ef685700499"
            ]
        ]
    },
    {
        "id": "6ee7898848f1a79c",
        "type": "function",
        "z": "4f8d97d10d4ce0bd",
        "name": "save messageId",
        "func": "// We store the messageId to be able to edit this reply in the callback query. \ncontext.flow.deleting.messageId = msg.payload.sentMessageId;\ncontext.flow.callbackNumber = 3;\nreturn [ msg ];\n",
        "outputs": "1",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "e82146b2d13fed27",
        "type": "telegram event",
        "z": "4f8d97d10d4ce0bd",
        "name": "Callback_Query_Delete",
        "bot": "0f5db796f4cf57cf",
        "event": "callback_query",
        "autoanswer": true,
        "x": 200,
        "y": 560,
        "wires": [
            [
                "abf36721900c5975"
            ]
        ],
        "info": "ALL CALL BACK QUERIES ARE READ BY\nALL CALL BACK QUERRY NODES. This means\nwhether you only need one callback_query\nfor all of NodeRED. You just have to sort them."
    },
    {
        "id": "abf36721900c5975",
        "type": "function",
        "z": "4f8d97d10d4ce0bd",
        "name": "Search user",
        "func": "if(context.flow.callbackNumber != 3){\n    return;\n}\nvar arr = flow.get(\"arrayUsr\")\nvar num = flow.get(\"numUs\");\nvar i = 1;\n\nwhile(i <= num){\n    //DO NOT CLEAR THE MESSAGE, ASK CONFIRM\n    if(msg.payload.content == arr.payload[i].Username)\n    {\n        msg.payload.type = 'deleteMessage';\n        msg.payload.content = context.flow.deleting.messageId\n        context.flow.deleting.messageId = null;\n        context.flow.callbackNumber = null;\n        msg.topic = arr.payload[i].Username;\n        flow.set(\"userSelected\", i);\n        \n        //node.warn(msg.topic)\n        //node.warn(flow.get(\"userSelected\"))\n        //node.warn(i)\n        \n        return [msg];\n    }else\n        i++;\n}\nreturn;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 560,
        "wires": [
            [
                "796a901c3112cdb7"
            ]
        ]
    },
    {
        "id": "796a901c3112cdb7",
        "type": "telegram sender",
        "z": "4f8d97d10d4ce0bd",
        "name": "DELETE the inline keyboard",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 600,
        "y": 560,
        "wires": [
            [
                "0f439b27f9f91d69"
            ]
        ]
    },
    {
        "id": "0f439b27f9f91d69",
        "type": "function",
        "z": "4f8d97d10d4ce0bd",
        "name": "Inline sure Keyboard",
        "func": "node.log(\"Selected User: \"+ msg.topic)\n\n\ncontext.flow.sure = { messageId : msg.payload.messageId };\n//context.flow.sure = { messageId : context.flow.deleting };\n//context.flow.sure =  context.flow.deleting ;\n\nvar arr = flow.get(\"arrayUsr\");\n\nvar opts = {\n  reply_markup: JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"✅Yes!\",\n            \"callback_data\": \"YES\"            \n        },\n        {\n            \"text\": \"🚫No\",\n            \"callback_data\": \"NO\"            \n        }]]\n  })\n};\n\nmsg = flow.get(\"deleteMsg\");\nmsg.payload.content =\n                        \"🚨🚨🚨\\nAre you sure to remove \"  \n                        + arr.payload[flow.get(\"userSelected\")].Name \n                        + \"  as @\" \n                        + arr.payload[flow.get(\"userSelected\")].Username\n                        + \"?\";\nmsg.payload.options = opts;\n\nreturn [msg];\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 560,
        "wires": [
            [
                "1dbdbedeb0c2d523"
            ]
        ]
    },
    {
        "id": "1dbdbedeb0c2d523",
        "type": "telegram sender",
        "z": "4f8d97d10d4ce0bd",
        "name": "Sure OR not",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1030,
        "y": 560,
        "wires": [
            [
                "25dff51c0bf4c4ca"
            ]
        ]
    },
    {
        "id": "25dff51c0bf4c4ca",
        "type": "function",
        "z": "4f8d97d10d4ce0bd",
        "name": "save messageId",
        "func": "// We store the messageId to be able to edit this reply in the callback query. \ncontext.flow.sure.messageId = msg.payload.sentMessageId;\ncontext.flow.callbackNumber = 4;\nreturn [ msg ];\n",
        "outputs": "1",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "f6ede3f184a055b5",
        "type": "telegram event",
        "z": "4f8d97d10d4ce0bd",
        "name": "Callback_Query_Delete",
        "bot": "0f5db796f4cf57cf",
        "event": "callback_query",
        "autoanswer": true,
        "x": 200,
        "y": 680,
        "wires": [
            [
                "9016f55a43912e09"
            ]
        ],
        "info": "ALL CALL BACK QUERIES ARE READ BY\nALL CALL BACK QUERRY NODES. This means\nwhether you only need one callback_query\nfor all of NodeRED. You just have to sort them."
    },
    {
        "id": "9016f55a43912e09",
        "type": "function",
        "z": "4f8d97d10d4ce0bd",
        "name": "Evaluate Yes/No",
        "func": "if(context.flow.callbackNumber != 4){\n    return;\n}\n\nif(msg.payload.content === \"YES\")\n{\n    msg.payload.type = 'deleteMessage';\n    msg.payload.content = context.flow.sure.messageId\n    context.flow.sure.messageId = null;\n    context.flow.callbackNumber = null;\n    msg.topic = 'REMOVE';\n    return msg;\n}\nelse if(msg.payload.content === \"NO\")\n{\n    msg.payload.type = 'deleteMessage';\n    msg.payload.content = context.flow.sure.messageId\n    context.flow.sure.messageId = null;\n    context.flow.callbackNumber = null;\n    msg.topic = 'CANCEL';\n    return msg;\n}\n\n\nelse\n{\n    var show_alert = false;\n    msg.payload.options = show_alert;\n    \n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 680,
        "wires": [
            [
                "6802db6f76b9b653"
            ]
        ]
    },
    {
        "id": "6802db6f76b9b653",
        "type": "telegram sender",
        "z": "4f8d97d10d4ce0bd",
        "name": "DELETE the inline keyboard",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 620,
        "y": 680,
        "wires": [
            [
                "0eb2950e13505746"
            ]
        ]
    },
    {
        "id": "0eb2950e13505746",
        "type": "function",
        "z": "4f8d97d10d4ce0bd",
        "name": "Wait / CANCEL",
        "func": "node.log(\"Selected Option: \"+ msg.topic)\n\n\nmsg.payload.type = \"message\"\n\n\nif (msg.topic === 'REMOVE'){\n    msg.payload.content = \n                \"⌛️User \" \n                + flow.get(\"arrayUsr\").payload[flow.get(\"userSelected\")].Name \n                + \" will be deleted soon⌛️\\n\"\n}\nelse if(msg.topic === 'CANCEL'){\n    msg.payload.content = \"No ONE was removed!!😀😀\"\n\n}\n\nreturn [msg];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 680,
        "wires": [
            [
                "18790944c56ae85b"
            ]
        ]
    },
    {
        "id": "18790944c56ae85b",
        "type": "telegram sender",
        "z": "4f8d97d10d4ce0bd",
        "name": "DELETE / CANCEL",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1030,
        "y": 680,
        "wires": [
            [
                "1dc5cfd2d353a4be"
            ]
        ]
    },
    {
        "id": "1dc5cfd2d353a4be",
        "type": "function",
        "z": "4f8d97d10d4ce0bd",
        "name": "REMOVE",
        "func": "if(msg.topic !== \"REMOVE\")\n    return;\n\nvar mustDelete = flow.get(\"arrayUsr\").payload[flow.get(\"userSelected\")];\nvar index = flow.get(\"userSelected\");\n\nglobal.set(\"mustDelete\", mustDelete);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 680,
        "wires": [
            [
                "f7bc44d99070220a"
            ]
        ]
    },
    {
        "id": "1e23f9047b3f7f75",
        "type": "function",
        "z": "4f8d97d10d4ce0bd",
        "name": "Write on file",
        "func": "if(flow.get(\"deletedFile\") == 0){\n    flow.set(\"deletedFile\", 1)\n    node.send([null, msg]);\n}\n\nif(msg.payload.Username !== global.get(\"mustDelete\").Username){\n    return [msg,null];\n}\nreturn;\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nflow.set(\"deletedFile\", \"0\");",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 680,
        "wires": [
            [
                "9ce395bdaa967cfb"
            ],
            [
                "815f87400ce770a9"
            ]
        ]
    },
    {
        "id": "f7bc44d99070220a",
        "type": "subflow:662c20e8e73bc9f7",
        "z": "4f8d97d10d4ce0bd",
        "name": "",
        "x": 1340,
        "y": 680,
        "wires": [
            [
                "1e23f9047b3f7f75"
            ],
            []
        ]
    },
    {
        "id": "9ce395bdaa967cfb",
        "type": "file",
        "z": "4f8d97d10d4ce0bd",
        "name": "Rewrite",
        "filename": "/home/lberna/Desktop/chatId.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1640,
        "y": 660,
        "wires": [
            [
                "c7c7999c5207c9ea"
            ]
        ]
    },
    {
        "id": "815f87400ce770a9",
        "type": "file",
        "z": "4f8d97d10d4ce0bd",
        "name": "DELETE file",
        "filename": "/home/lberna/Desktop/chatId.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 1650,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "7eef94ec8bb1facb",
        "type": "telegram sender",
        "z": "4f8d97d10d4ce0bd",
        "name": "User deleted",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1950,
        "y": 660,
        "wires": [
            [
                "b4ac7fee92a74489"
            ]
        ]
    },
    {
        "id": "c7c7999c5207c9ea",
        "type": "function",
        "z": "4f8d97d10d4ce0bd",
        "name": "DELETED",
        "func": "flow.set(\"deletedFile\",0);\n\nmsg = flow.get(\"last\");\ndelete msg.payload.options\n\nmsg.payload.type = \"message\"\n\nmsg.payload.content = \n                \"User \" \n                + flow.get(\"arrayUsr\").payload[flow.get(\"userSelected\")].Name \n                + \" as @\" \n                + flow.get(\"arrayUsr\").payload[flow.get(\"userSelected\")].Username\n                + \" has been 📛DELETED📛\\n\"\n\n\nif(flow.get(\"deleteSent\") == 0){\n    flow.set(\"deleteSent\",1)\n    return [msg];\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"deleteSent\",0)",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 660,
        "wires": [
            [
                "7eef94ec8bb1facb"
            ]
        ]
    },
    {
        "id": "b4ac7fee92a74489",
        "type": "function",
        "z": "4f8d97d10d4ce0bd",
        "name": "Reset",
        "func": "// We store the messageId to be able to edit this reply in the callback query. \nflow.set(\"deleteSent\", 0);",
        "outputs": "1",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2090,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "df10ef1a29a41fce",
        "type": "function",
        "z": "4f8d97d10d4ce0bd",
        "name": "Count Users",
        "func": "var counter = flow.get(\"numUs\");\nflow.set(\"numUs\", ++counter)\nmsg.payload.counter = counter;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n\n",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 380,
        "wires": [
            [
                "c6b0dc9b53b4c412"
            ]
        ]
    },
    {
        "id": "7eb81ef685700499",
        "type": "function",
        "z": "4f8d97d10d4ce0bd",
        "name": "File Does NOTexist",
        "func": "msg = flow.get(\"deleteMsg\");\n\nmsg.payload.content = \"😱No one is subscribed😱\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n\n",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 420,
        "wires": [
            [
                "48f4c1d16a75fb21"
            ]
        ]
    },
    {
        "id": "48f4c1d16a75fb21",
        "type": "telegram sender",
        "z": "4f8d97d10d4ce0bd",
        "name": "No one on file",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 840,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "5b89d198b0185ae4",
        "type": "subflow:662c20e8e73bc9f7",
        "z": "9a353933505ea477",
        "name": "",
        "x": 180,
        "y": 140,
        "wires": [
            [
                "aceb23cb49cbe49e"
            ],
            [
                "4812b01fb8eb66b4"
            ]
        ]
    },
    {
        "id": "aceb23cb49cbe49e",
        "type": "function",
        "z": "9a353933505ea477",
        "name": "Evaluate User",
        "func": "const user = global.get(\"subUser\");\n\nflow.set(\"sent\",0)\n\nif(user.Username == \"\" || user.Name == \"\"){\n    flow.set(\"invalid\", 1);\n    return msg;\n}\n\nfor(var i=0 ; i<3 ; i++){\n    if(user.chatId == global.get(\"admins\")[i]){\n        flow.set(\"isAdmin\",1);\n        return msg;\n    }\n}\n\nif(user.Username == msg.payload.Username){\n    flow.set(\"find\", 1);\n    return msg;\n}\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"find\" ,0)\nflow.set(\"isAdmin\",0)\nflow.set(\"invalid\", 0)\n",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 120,
        "wires": [
            [
                "d44fa343ef908753"
            ]
        ]
    },
    {
        "id": "d44fa343ef908753",
        "type": "function",
        "z": "9a353933505ea477",
        "name": "Is user on file",
        "func": "global.get(\"SubscribeMsg\").payload = global.get(\"subUser\")\nif(flow.get(\"sent\") == 0){\n    flow.set(\"sent\",1);\n    if(flow.get(\"invalid\") == 1){\n        flow.set(\"invalid\",0)\n        return [msg, null, null, null]\n    }\n    else if(flow.get(\"isAdmin\") == 1){\n        flow.set(\"isAdmin\",0)\n        return [null, msg, null, null]\n    }\n    else if(flow.get(\"find\") == 1){\n        flow.set(\"find\",0)\n        return [null, null, msg, null]\n    }\n    else if(flow.get(\"find\") == 0){\n        return [null, null, null, msg]\n        flow.set(\"find\",0)\n    }\n}\nelse\n    return;",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 120,
        "wires": [
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "257238abaf66e0f3",
        "type": "comment",
        "z": "9a353933505ea477",
        "name": "INVALID",
        "info": "",
        "x": 780,
        "y": 60,
        "wires": []
    },
    {
        "id": "d91eef2c2078a280",
        "type": "comment",
        "z": "9a353933505ea477",
        "name": "ADMIN",
        "info": "",
        "x": 770,
        "y": 100,
        "wires": []
    },
    {
        "id": "eeea8bebd54c2044",
        "type": "comment",
        "z": "9a353933505ea477",
        "name": "FOUND",
        "info": "",
        "x": 770,
        "y": 140,
        "wires": []
    },
    {
        "id": "c95c1c88c48dec0a",
        "type": "comment",
        "z": "9a353933505ea477",
        "name": "NOT FOUND",
        "info": "",
        "x": 790,
        "y": 180,
        "wires": []
    },
    {
        "id": "4812b01fb8eb66b4",
        "type": "link out",
        "z": "9a353933505ea477",
        "name": "OUT Not found",
        "mode": "link",
        "links": [
            "b9c2d8c287d49485"
        ],
        "x": 295,
        "y": 160,
        "wires": []
    },
    {
        "id": "b9c2d8c287d49485",
        "type": "link in",
        "z": "9a353933505ea477",
        "name": "IN Not found",
        "links": [
            "4812b01fb8eb66b4"
        ],
        "x": 585,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "8d925e3eba19f864",
        "type": "comment",
        "z": "c072a6bbe1d49f83",
        "name": "Reply at /status with average LIght,Temperature, Humidity inside the house and Electrical devices status",
        "info": "",
        "x": 350,
        "y": 1060,
        "wires": []
    },
    {
        "id": "df9fa5cf51f787d0",
        "type": "telegram command",
        "z": "c072a6bbe1d49f83",
        "name": "🟡STATUS",
        "command": "/status",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "0f5db796f4cf57cf",
        "strict": false,
        "hasresponse": false,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 1,
        "x": 170,
        "y": 1160,
        "wires": [
            [
                "7a216d0ad30e7d73"
            ]
        ]
    },
    {
        "id": "2cebe41ca720d83f",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Inline status Keyboard",
        "func": "//msg = flow.get(\"StatusMsg\");\ncontext.flow.keyboard = { messageId : msg.payload.messageId };\n\n\nvar opts = {\n  reply_markup: JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"🌡Temperature\",\n            \"callback_data\": \"Temperature\"            \n        },\n        {\n            \"text\": \"❄️Humidity\",\n            \"callback_data\": \"Humidity\"            \n        }, \n        {\n            \"text\": \"💡Brightness\",\n            \"callback_data\": \"Brightness\"            \n        }],\n        [{\n            \"text\": \"⚡️Devices\",\n            \"callback_data\": \"Devices\"            \n        }]\n        ]\n  })\n};\n\nmsg.payload.content = 'Which status do you want?';\nmsg.payload.options = opts;\n\nreturn [msg];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1120,
        "wires": [
            [
                "68f8765d04b30fd8"
            ]
        ]
    },
    {
        "id": "4fa9cafbf493e23c",
        "type": "telegram event",
        "z": "c072a6bbe1d49f83",
        "name": "Callback_Query_Status",
        "bot": "0f5db796f4cf57cf",
        "event": "callback_query",
        "autoanswer": true,
        "x": 200,
        "y": 1240,
        "wires": [
            [
                "02e75cf3055f0c3f"
            ]
        ],
        "info": "ALL CALL BACK QUERIES ARE READ BY\nALL CALL BACK QUERRY NODES. This means\nwhether you only need one callback_query\nfor all of NodeRED. You just have to sort them."
    },
    {
        "id": "68f8765d04b30fd8",
        "type": "telegram sender",
        "z": "c072a6bbe1d49f83",
        "name": "show inline keyboard",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1220,
        "y": 1120,
        "wires": [
            [
                "587846f47d9067f2"
            ]
        ]
    },
    {
        "id": "587846f47d9067f2",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "save messageId",
        "func": "// We store the messageId to be able to edit this reply in the callback query. \ncontext.flow.keyboard.messageId = msg.payload.sentMessageId;\ncontext.flow.callbackNumber = 2;\nflow.set(\"alreadySub\" ,0);\nflow.set(\"Retry\",0)\nreturn [ msg ];\n",
        "outputs": "1",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "02e75cf3055f0c3f",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Evaluate User request",
        "func": "if(context.flow.callbackNumber != 2){\n    return;\n}\nvar sens = msg.payload.content\n\nif(sens){\n    msg.payload.type = 'deleteMessage';\n    msg.payload.content = context.flow.keyboard.messageId\n    context.flow.keyboard.messageId = null;\n    context.flow.callbackNumber = null;\n    msg.topic = sens;\n    return msg;\n}\n\nelse\n{\n    var show_alert = false; // you can set this to true to open a dialog with the answer in the client.\n    \n    // msg.payload.content contains the callback data from the keyboard.\n    // You may change this value here.\n    msg.payload.options = show_alert;\n\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1240,
        "wires": [
            [
                "d1bc305655b9c949"
            ]
        ]
    },
    {
        "id": "28e5bf534a6d7704",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Read sensor values",
        "func": "node.log(\"Selected Status: \"+ msg.topic)\n\nmsg.payload.type = \"message\"\nmsg.payload.options = {\n    parse_mode :\"Markdown\",\n    disable_web_page_preview : true\n}\n\nflow.set(\"Retry\",0)\n\n\nswitch(msg.topic){\n    \n    case \"Brightness\":\n        msg.payload.content = \"*Brightness:*  \" + global.get(\"lr_brightness\")\n        break;\n        \n    case \"Temperature\":\n        msg.payload.content = \"*Internal Temp:*  \" + global.get(\"lr_temperature\")\n                                +\"\\n*External Temp:*  \" + global.get(\"extTempWeather\");\n\n        break;\n    \n    case \"Humidity\":\n        msg.payload.content = \"*Humidity*:  \"+ global.get(\"lr_humidity\")\n\n        break;\n        \n    case \"Devices\":\n        msg.payload.content = \"🪟*Rollers*:\"\n                                +\"\\n  -  Livingroom yard:  _\"+ global.get(\"lr_yardroller_pos\") + \"%_\"\n                                +\"\\n  -  Livingroom road:  _\"+ global.get(\"lr_roadroller_pos\") + \"%_\"\n                                +\"\\n  -  small Bedroom:  _\"+ global.get(\"smallbr_roller_pos\") + \"%_\"\n                                +\"\\n  -  main Bedroom:  _\"+ global.get(\"mainbr_roller_pos\") + \"%_\"\n                                \n                        + \"\\n\\n💡*Lights*:\" \n                                +\"\\n  -  Ambient:  _\"+ global.get(\"lr_ambientlight\")+\"_\"\n                                +\"\\n  -  Main:  _\"+ global.get(\"lr_mainlight\")+\"_\"\n                                \n                        + \"\\n\\n🌬*Conditioners*:\"\n                                +\"\\n  -  Livingroom:  _\"+ global.get(\"lr_conditioner_state\")+\"_\"\n                                +\"\\n  -  Main Bedroom:  _\"+ global.get(\"mainbr_conditioner_state\")+\"_\"\n                                +\"\\n  -  Small Bedroom:  _\"+ global.get(\"smallbr_conditioner_state\")+\"_\"\n                        \n                        + \"\\n\\n🔍*Sensors*:\"\n                                +\"\\n  -  State:  _\"+ global.get(\"lr_connection\")+\"_\"\n                        \n        break;\n    \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1240,
        "wires": [
            [
                "1c3907d0a3eca009"
            ]
        ]
    },
    {
        "id": "1c3907d0a3eca009",
        "type": "telegram sender",
        "z": "c072a6bbe1d49f83",
        "name": "Send STATUS Response",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1130,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "d1bc305655b9c949",
        "type": "telegram sender",
        "z": "c072a6bbe1d49f83",
        "name": "DELETE the inline keyboard",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 660,
        "y": 1240,
        "wires": [
            [
                "28e5bf534a6d7704"
            ]
        ]
    },
    {
        "id": "7a216d0ad30e7d73",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Status request",
        "func": "var message = msg\nflow.set(\"StatusMsg\", message);\n\nvar name = message.originalMessage.from.first_name;\nvar user = message.originalMessage.from.username;\nvar id = message.originalMessage.from.id;\n\nnode.log(\"Command: \"+ msg.originalMessage.text +\" requested by \"+ user)\n\nvar trying = {\n        \"Name\" : name,\n        \"Username\": user,\n        \"chatId\": id\n}\n\nflow.set(\"trying\",trying);\n\n//msg.payload\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1160,
        "wires": [
            [
                "c9595d866aa80c80"
            ]
        ]
    },
    {
        "id": "29914a7fdd820257",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Check file",
        "func": "const user = flow.get(\"trying\");\n\nflow.set(\"Content\", 1)\n\nfor(var i=0; i<3 ; i++){\n    if(user.chatId == global.get(\"admins\")[i]){\n        flow.set(\"alreadySub\", 1);\n        return [msg];\n    }\n}\n\nif(user.Username == msg.payload.Username){\n    flow.set(\"alreadySub\", 1);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"alreadySub\" ,0);\nflow.set(\"Content\", 1);",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1140,
        "wires": [
            [
                "ad0e6153aaa92401"
            ]
        ]
    },
    {
        "id": "ad0e6153aaa92401",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Already Sub?",
        "func": "msg = flow.get(\"StatusMsg\");\n\nif(flow.get(\"Retry\") == 1)\n    return;\n\nif(flow.get(\"alreadySub\") == 1){\n    node.log(\"Subscribed\")\n    flow.set(\"Retry\",1);\n    return [msg, null];\n    \n}\nelse if(flow.get(\"alreadySub\") == 0){\n    node.log(\"NOT Subscribed\")\n\n    flow.set(\"Retry\",1);\n    msg.payload.content = \"Dear \"+flow.get(\"trying\").Name +\", you are NOT subscribed!!\\nPlease send a subscription request...\";\n    return [null, msg];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"Retry\", 0);\n",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1140,
        "wires": [
            [
                "2cebe41ca720d83f"
            ],
            [
                "037627aa18201f8b"
            ]
        ]
    },
    {
        "id": "037627aa18201f8b",
        "type": "telegram sender",
        "z": "c072a6bbe1d49f83",
        "name": "Not subscribed",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 980,
        "y": 1160,
        "wires": [
            [
                "f2d6a6533787c8a3"
            ]
        ]
    },
    {
        "id": "f2d6a6533787c8a3",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Reset",
        "func": "// We store the messageId to be able to edit this reply in the callback query. \nflow.set(\"Retry\", 0);\nflow.set(\"alreadySub\" ,0);",
        "outputs": "1",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "75b5ba80eb17f193",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Empty file",
        "func": "msg = flow.get(\"StatusMsg\");\n\nif(flow.get(\"Content\") == 1){\n    return;\n}\n\nif(flow.get(\"Retry\") == 0){\n    flow.set(\"Retry\",1);\n    msg.payload.content = \"Dear \"+flow.get(\"trying\").Name +\", you are NOT subscribed!!\\nPlease send a subscription request...\";\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"Retry\", 0);",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1180,
        "wires": [
            [
                "d3b50c8e9dbe0cf9"
            ]
        ]
    },
    {
        "id": "e458eb27db040bea",
        "type": "telegram command",
        "z": "c072a6bbe1d49f83",
        "name": "🔴LIST",
        "command": "/list",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "0f5db796f4cf57cf",
        "strict": false,
        "hasresponse": false,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 1,
        "x": 150,
        "y": 2200,
        "wires": [
            [
                "1bedf6d8dfb7749c"
            ]
        ]
    },
    {
        "id": "b23498e71d10d123",
        "type": "comment",
        "z": "c072a6bbe1d49f83",
        "name": "Reply at /list of users",
        "info": "",
        "x": 90,
        "y": 2120,
        "wires": []
    },
    {
        "id": "1bedf6d8dfb7749c",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "is Admin?",
        "func": "var message = msg\nflow.set(\"listMsg\", message);\n\nvar name = message.originalMessage.from.first_name;\nvar user = message.originalMessage.from.username;\nvar id = message.payload.chatId;\nflow.set(\"Users_number\", 0);\n\nnode.log(\"Command: \"+ msg.originalMessage.text +\" requested by \"+ user)\n\n\nvar listUsr = {\n        \"Name\" : name,\n        \"Username\": user,\n        \"chatId\": id\n}\nflow.set(\"listUsr\",listUsr);\n    \n\nvar ad = 0;\nfor(var i = 0; i<3 ; i++){\n    if(global.get(\"admins\")[i] == listUsr.chatId)\n        ad = 1;\n}\n\nif(ad == 1){\n    node.log(\"ADMIN\")\n    return [msg,null];\n}\nelse{\n    node.log(\"NOT ADMIN\")\n    msg.payload.content = \"🚫\" + listUsr.Name+\" you are not an Admin, you cannot access this resource!\"\n    return [null,msg];\n}\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 2200,
        "wires": [
            [
                "22660cb893ba36bc"
            ],
            [
                "973bbdb0e167d6ec"
            ]
        ]
    },
    {
        "id": "973bbdb0e167d6ec",
        "type": "telegram sender",
        "z": "c072a6bbe1d49f83",
        "name": "Not Admin - Access Denied",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 500,
        "y": 2240,
        "wires": [
            []
        ]
    },
    {
        "id": "66dbdba25738c22e",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Count Users",
        "func": "var counter = flow.get(\"Users_number\");\nflow.set(\"Users_number\", ++counter)\nmsg.payload.counter = counter;\n\nflow.set(\"string\", \"📄 *Users List:*\\n\");\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n\n",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 2140,
        "wires": [
            [
                "c768a4d96cbca7e6"
            ]
        ]
    },
    {
        "id": "daf124c16ee2d581",
        "type": "telegram sender",
        "z": "c072a6bbe1d49f83",
        "name": "Send Users List",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 900,
        "y": 2140,
        "wires": [
            []
        ]
    },
    {
        "id": "c768a4d96cbca7e6",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "List Users",
        "func": "var string = flow.get(\"string\")\n\nstring += \"-   \"\n        + \"@\"\n        + msg.payload.Username \n        + \"   -\\n\";\nflow.set(\"string\", string);\n\nif (msg.payload.counter == flow.get(\"Users_number\")){\n    msg = flow.get (\"listMsg\");\n    msg.payload.content = string;\n    msg.payload.options = {disable_web_page_preview : true, parse_mode :\"Markdown\"}\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 2140,
        "wires": [
            [
                "daf124c16ee2d581"
            ]
        ]
    },
    {
        "id": "fd61dd8951004d8b",
        "type": "telegram command",
        "z": "c072a6bbe1d49f83",
        "name": "🟢INFO",
        "command": "/info",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "0f5db796f4cf57cf",
        "strict": false,
        "hasresponse": false,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 1,
        "x": 160,
        "y": 400,
        "wires": [
            [
                "2c07568a43274717"
            ]
        ]
    },
    {
        "id": "2c07568a43274717",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "info message",
        "func": "var id = msg.originalMessage.from.id;\nvar name = msg.originalMessage.from.first_name;\nvar user = msg.originalMessage.from.username;\n\nnode.log(\"Command: \"+ msg.originalMessage.text +\" requested by \"+ user)\n\nvar string = \"\\nDear *\"+ name  + \"* You are NOT an admin of this bot\\n\"\n            + \"\\nMy name is 🤖_BotIoT_ and I will help you to manage your house...\\n\"\n            + \"\\n✍️ If you want to use the bot, you need to ask for a subscription.\"\n            + \"\\n\\n_The first Admin that read you notification will evaluate your profile_\"\n            + \"\\n\\nSee you on chat...\";\n\nvar ad = 0;\nfor(var i=0; i<3 && !ad; i++){\n    if(global.get(\"admins\")[i] == id){\n        ad = 1;\n        string = \"\\nWelcome back BOSS!!\";\n    }\n}\n\n\nmsg.payload.content =\n            string\n            \n            \n            + \"\\n\\n\\n\\n📍*Commands LEGEND:*\\n\\n\"\n            + \"🟢 = _ALL users can use it_\\n\"\n            + \"🟡 = _Only SUBSCRIBED users can use it_\\n\"\n            + \"🔴 = _Only ADMINS can use it_\\n\\n\\n\\n\\n\"\n            + \"\\n\\n💻`Developers:`\\n\"\n            + \"@LucaBerna         \"\n            + \"@j4rj4r61nk5\"\n            \n            \nmsg.payload.options = {disable_web_page_preview : true, parse_mode :\"Markdown\"}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 420,
        "wires": [
            [
                "1ff8fa5b85d8b433"
            ]
        ]
    },
    {
        "id": "1ff8fa5b85d8b433",
        "type": "telegram sender",
        "z": "c072a6bbe1d49f83",
        "name": "Info sender",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 490,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "9beef4a41b1f04ec",
        "type": "link in",
        "z": "c072a6bbe1d49f83",
        "name": "IN Empty Status",
        "links": [
            "d3b50c8e9dbe0cf9"
        ],
        "x": 865,
        "y": 1180,
        "wires": [
            [
                "037627aa18201f8b"
            ]
        ]
    },
    {
        "id": "b042a52049d067b7",
        "type": "comment",
        "z": "c072a6bbe1d49f83",
        "name": "Reply to /subscribe command",
        "info": "Gestione subscriptions.",
        "x": 120,
        "y": 600,
        "wires": []
    },
    {
        "id": "3d06062871d0b2e6",
        "type": "comment",
        "z": "c072a6bbe1d49f83",
        "name": "Reply to /info command  ",
        "info": "Explain the aim of the bot",
        "x": 100,
        "y": 340,
        "wires": []
    },
    {
        "id": "d3b50c8e9dbe0cf9",
        "type": "link out",
        "z": "c072a6bbe1d49f83",
        "name": "OUT Empty status",
        "mode": "link",
        "links": [
            "9beef4a41b1f04ec"
        ],
        "x": 735,
        "y": 1180,
        "wires": []
    },
    {
        "id": "c9595d866aa80c80",
        "type": "subflow:662c20e8e73bc9f7",
        "z": "c072a6bbe1d49f83",
        "name": "",
        "x": 500,
        "y": 1160,
        "wires": [
            [
                "29914a7fdd820257"
            ],
            [
                "75b5ba80eb17f193"
            ]
        ]
    },
    {
        "id": "22660cb893ba36bc",
        "type": "subflow:662c20e8e73bc9f7",
        "z": "c072a6bbe1d49f83",
        "name": "",
        "x": 440,
        "y": 2160,
        "wires": [
            [
                "66dbdba25738c22e"
            ],
            [
                "2d41b6e1a8253f23"
            ]
        ]
    },
    {
        "id": "3928ab4fcda04c06",
        "type": "comment",
        "z": "c072a6bbe1d49f83",
        "name": "Reply to /command",
        "info": "",
        "x": 90,
        "y": 1660,
        "wires": []
    },
    {
        "id": "1a6c229d3cdd6db1",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "is Admin?",
        "func": "var message = msg\nflow.set(\"commandMsg\", message);\n\nvar name = message.originalMessage.from.first_name;\nvar user = message.originalMessage.from.username;\nvar id = message.payload.chatId;\n\nnode.log(\"Command: \"+ msg.originalMessage.text +\" requested by \"+ user)\n\n\nvar cmdUsr = {\n        \"Name\" : name,\n        \"Username\": user,\n        \"chatId\": id\n}\nflow.set(\"cmdUsr\",cmdUsr);\nflow.set(\"numUs\", 0)\n    \nvar ad = 0;\n\nfor(var i = 0; i<3 ; i++){\n    //node.warn(flow.get(\"admins\")[i])\n    if(global.get(\"admins\")[i] == cmdUsr.chatId)\n        ad = 1;\n}\n\nif(ad == 1){\n    node.log(\"ADMIN\")\n    return [msg,null];\n}\nelse{\n    node.log(\"NOT ADMIN\")\n    msg.payload.content = \"🚫\" + cmdUsr.Name+\" you are not an Admin, you cannot access this resource!\"\n    return [null,msg];\n}\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1740,
        "wires": [
            [
                "b69706d7e3231423"
            ],
            [
                "2edd4b4f4a1d1d82"
            ]
        ]
    },
    {
        "id": "1a1067b54cd518b4",
        "type": "telegram command",
        "z": "c072a6bbe1d49f83",
        "name": "🔴COMMAND",
        "command": "/command",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "0f5db796f4cf57cf",
        "strict": false,
        "hasresponse": false,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 1,
        "x": 180,
        "y": 1740,
        "wires": [
            [
                "1a6c229d3cdd6db1"
            ]
        ]
    },
    {
        "id": "2edd4b4f4a1d1d82",
        "type": "telegram sender",
        "z": "c072a6bbe1d49f83",
        "name": "Not Admin - Access Denied",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 540,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "b69706d7e3231423",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Groups Keyboard",
        "func": "context.flow.commands = { messageId : msg.payload.messageId };\n\n\nvar opts = {\n  reply_markup: JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"🌓Roller\",\n            \"callback_data\": \"Roller\"            \n        },\n        {\n            \"text\": \"💡Light\",\n            \"callback_data\": \"Light\"            \n        }], \n        [{\n            \"text\": \"🚀Go OUT\",\n            \"callback_data\": \"Exit\"         \n        }]]\n  })\n};\n\nmsg.payload.content = 'Which object do you want to control?';\nmsg.payload.options = opts;\n\nglobal.set(\"currentGroup\", null);\nglobal.set(\"currentActuator\", null);\nglobal.set(\"currentOption\", null);\n\nreturn [msg];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1720,
        "wires": [
            [
                "7a6566c013c7af6e"
            ]
        ]
    },
    {
        "id": "7a6566c013c7af6e",
        "type": "telegram sender",
        "z": "c072a6bbe1d49f83",
        "name": "Send Commands list",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 720,
        "y": 1720,
        "wires": [
            [
                "5a9a2ccc9563074f"
            ]
        ]
    },
    {
        "id": "5a9a2ccc9563074f",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "save messageId",
        "func": "// We store the messageId to be able to edit this reply in the callback query. \ncontext.flow.commands.messageId = msg.payload.sentMessageId;\ncontext.flow.callbackNumber = 5;\nreturn [ msg ];\n",
        "outputs": "1",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1720,
        "wires": [
            []
        ]
    },
    {
        "id": "b32e54f644265710",
        "type": "telegram event",
        "z": "c072a6bbe1d49f83",
        "name": "Callback_Query_Option",
        "bot": "0f5db796f4cf57cf",
        "event": "callback_query",
        "autoanswer": true,
        "x": 200,
        "y": 1960,
        "wires": [
            [
                "3ef37b079aad8fe0"
            ]
        ],
        "info": "ALL CALL BACK QUERIES ARE READ BY\nALL CALL BACK QUERRY NODES. This means\nwhether you only need one callback_query\nfor all of NodeRED. You just have to sort them."
    },
    {
        "id": "3ef37b079aad8fe0",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Evaluate Option",
        "func": "if(context.flow.callbackNumber != 7){\n    return;\n}\n\nvar currOpt = msg.payload.content;\nglobal.set(\"currentOption\", currOpt);\n//node.warn(\"currentOption: \"+currOpt);\n\nif(currOpt)\n{\n    // Hide the keyboard and forget the messageId\n    msg.payload.type = 'deleteMessage';\n    msg.payload.content = context.flow.options.messageId\n    context.flow.options.messageId = null;\n    context.flow.callbackNumber = null;\n    msg.topic = currOpt;\n    return msg;\n}\n\n\n\nelse\n{\n    var show_alert = false;\n    msg.payload.options = show_alert;\n    \n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1960,
        "wires": [
            [
                "c0de3c5b7a5925f9"
            ]
        ]
    },
    {
        "id": "c0de3c5b7a5925f9",
        "type": "telegram sender",
        "z": "c072a6bbe1d49f83",
        "name": "DELETE the inline keyboard",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 620,
        "y": 1960,
        "wires": [
            [
                "d3a6982867934925"
            ]
        ]
    },
    {
        "id": "d3a6982867934925",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Selected Option",
        "func": "node.log(\"Selected Option: \"+ msg.topic)\n\n\nmsg.payload.type = \"message\"\n\n\nswitch(msg.topic){\n    \n    case \"CANCEL\":\n        msg.payload.content = \"Your request has been canceled\"\n        break;\n    \n    case \"0\":\n        msg.payload.content = \"I'm closing the _\"+ global.get(\"actDescription\")+\"_\"\n        break;\n    \n    case \"25\":\n        msg.payload.content = \"I'm moving the  _\"+ global.get(\"actDescription\")+\"_ position to 25%\"\n        break;\n    \n    case \"50\":\n        msg.payload.content = \"I'm moving the  _\"+ global.get(\"actDescription\")+\"_ position to 50%\"\n        break;\n    \n    case \"75\":\n        msg.payload.content = \"I'm moving the  _\"+ global.get(\"actDescription\")+\"_ position to 75%\"\n        break;\n        \n    case \"100\":\n        msg.payload.content = \"I'm opening the  _\"+ global.get(\"actDescription\")+\"_\"\n        break;\n    \n        \n    case \"on\":\n        msg.payload.content = \"Turning ON the _\"+ global.get(\"actDescription\")+\"_\"\n        break;\n    \n    case \"off\":\n        msg.payload.content = \"Turning OFF the _\"+ global.get(\"actDescription\")+\"_\"\n        break;\n        \n}\nmsg.payload.options = {parse_mode :\"Markdown\"};\n\n\nreturn [msg];\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1960,
        "wires": [
            [
                "0ee37fbd86dd3a75"
            ]
        ]
    },
    {
        "id": "0ee37fbd86dd3a75",
        "type": "telegram sender",
        "z": "c072a6bbe1d49f83",
        "name": "Response to change status",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1060,
        "y": 1960,
        "wires": [
            [
                "b44558d1ebd1b497"
            ]
        ]
    },
    {
        "id": "fcc221f088477aa9",
        "type": "telegram event",
        "z": "c072a6bbe1d49f83",
        "name": "Callback_Query_Group",
        "bot": "0f5db796f4cf57cf",
        "event": "callback_query",
        "autoanswer": true,
        "x": 200,
        "y": 1840,
        "wires": [
            [
                "8fd0558b7eea6ab2"
            ]
        ],
        "info": "ALL CALL BACK QUERIES ARE READ BY\nALL CALL BACK QUERRY NODES. This means\nwhether you only need one callback_query\nfor all of NodeRED. You just have to sort them."
    },
    {
        "id": "8fd0558b7eea6ab2",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Evaluate Group",
        "func": "if(context.flow.callbackNumber != 5){\n    return;\n}\nvar group = msg.payload.content;\nglobal.set(\"currentGroup\", group);\n//node.warn(\"currentGroup: \"+group);\n\nif(group)\n{\n    msg.payload.type = 'deleteMessage';\n    msg.payload.content = context.flow.commands.messageId\n    context.flow.commands.messageId = null;\n    context.flow.callbackNumber = null;\n    msg.topic = group;\n    return msg;\n    \n}\n\n\n\nelse{\n    var show_alert = false;\n    msg.payload.options = show_alert;\n\n    return msg;\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1840,
        "wires": [
            [
                "3e11a96a6c55b3dc"
            ]
        ]
    },
    {
        "id": "3e11a96a6c55b3dc",
        "type": "telegram sender",
        "z": "c072a6bbe1d49f83",
        "name": "DELETE the inline keyboard",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 620,
        "y": 1840,
        "wires": [
            [
                "e42d7dae6a6e5f18"
            ]
        ]
    },
    {
        "id": "e42d7dae6a6e5f18",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Actuators Keyboards",
        "func": "node.log(\"Selected Group: \"+ msg.topic)\n\ncontext.flow.actuators = { messageId : msg.payload.messageId };\n\n\nvar optsRollers = {\n  reply_markup: JSON.stringify({\n    \"inline_keyboard\": [\n        [{\n            \"text\": \"Living🛋\",\n            \"callback_data\": global.get(\"actuArray\")[0]\n            \n        },\n        {\n            \"text\": \"Yard\",\n            \"callback_data\": global.get(\"actuArray\")[1]          \n        },\n        {\n            \"text\": \"Road\",\n            \"callback_data\": global.get(\"actuArray\")[2]         \n        }],\n        [{\n            \"text\": \"Main🛏\",\n            \"callback_data\": global.get(\"actuArray\")[3]          \n        },\n        {\n            \"text\": \"Small🛏\",\n            \"callback_data\": global.get(\"actuArray\")[4]           \n        }],\n        [{\n            \"text\": \"⛔️CANCEL⛔️\",\n            \"callback_data\": global.get(\"actuArray\")[9] \n            \n        }]\n        ]\n  })\n};\n\nvar optsLights = {\n  reply_markup: JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"Livingroom💡\",\n            \"callback_data\":   global.get(\"actuArray\")[5] \n        },\n        {\n            \"text\": \"Main💡\",\n            \"callback_data\":   global.get(\"actuArray\")[6]          \n        },\n        {\n            \"text\": \"Ambient💡\",\n            \"callback_data\":   global.get(\"actuArray\")[7]         \n        }],\n        [{\n            \"text\": \"⛔️CANCEL⛔️\",\n            \"callback_data\":  global.get(\"actuArray\")[9]\n            \n        }]]\n  })\n};\n\nvar optsExit = {\n    parse_mode :\"Markdown\",\n  reply_markup: JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"✅Yes\",\n            \"callback_data\":  global.get(\"actuArray\")[8]         \n        },\n        {\n            \"text\": \"⛔️No\",\n            \"callback_data\":  global.get(\"actuArray\")[9]           \n        }]]\n  })\n};\n\n\nvar topic = msg.topic\nmsg = flow.get(\"commandMsg\");\n\n\nswitch(topic){\n    case \"Roller\":\n        msg.payload.options = optsRollers;\n        msg.payload.content = \"Select the specific roller shutter:\"\n        break;\n        \n    case \"Light\":\n        msg.payload.options = optsLights;\n        msg.payload.content = \"Select the specific light:\"\n        break;\n        \n    case \"Exit\":\n        msg.payload.options = optsExit;\n        msg.payload.content =   \"_CONDITIONERs, ROLLER-SHUTTERs and LIGHTs will be closed_\\n\\n\"\n                                +\"*ARE YOU LEAVING?*\"\n                           \n                           \n        break;\n\n}\n\n \nreturn [msg];\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1840,
        "wires": [
            [
                "2533f681dc1401ba"
            ]
        ]
    },
    {
        "id": "2533f681dc1401ba",
        "type": "telegram sender",
        "z": "c072a6bbe1d49f83",
        "name": "Actuators Inline_Keyboard",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1100,
        "y": 1840,
        "wires": [
            [
                "728d41115822f7d5"
            ]
        ]
    },
    {
        "id": "728d41115822f7d5",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "save messageId",
        "func": "// We store the messageId to be able to edit this reply in the callback query. \ncontext.flow.actuators.messageId = msg.payload.sentMessageId;\ncontext.flow.callbackNumber = 6;\nreturn [ msg ];\n",
        "outputs": "1",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "17b6cb32f2803175",
        "type": "telegram event",
        "z": "c072a6bbe1d49f83",
        "name": "Callback_Query_Actuator",
        "bot": "0f5db796f4cf57cf",
        "event": "callback_query",
        "autoanswer": true,
        "x": 210,
        "y": 1900,
        "wires": [
            [
                "7227a6e11bbfb009"
            ]
        ],
        "info": "ALL CALL BACK QUERIES ARE READ BY\nALL CALL BACK QUERRY NODES. This means\nwhether you only need one callback_query\nfor all of NodeRED. You just have to sort them."
    },
    {
        "id": "7227a6e11bbfb009",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Evaluate Actuator",
        "func": "if(context.flow.callbackNumber != 6){\n    return;\n}\n\nvar content = msg.payload.content;\nglobal.set(\"currentActuator\", content);\n\n\nif(content)\n{\n    msg.payload.type = 'deleteMessage';\n    msg.payload.content = context.flow.actuators.messageId;\n    context.flow.actuators.messageId = null;\n    context.flow.callbackNumber = null;\n    msg.topic = content;\n    \n    return msg;\n}\n\nelse{\n    var show_alert = false;\n    msg.payload.options = show_alert;\n\n    return msg;\n}\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1900,
        "wires": [
            [
                "8063e28750e4ca4a"
            ]
        ]
    },
    {
        "id": "8063e28750e4ca4a",
        "type": "telegram sender",
        "z": "c072a6bbe1d49f83",
        "name": "DELETE the inline keyboard",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 660,
        "y": 1900,
        "wires": [
            [
                "b5d10f8724a8c047"
            ]
        ]
    },
    {
        "id": "b5d10f8724a8c047",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Options Keyboard",
        "func": "node.log(\"Selected Actuator: \"+ msg.topic)\n\n\ncontext.flow.options = { messageId : msg.payload.messageId };\n\n\nvar optsRoller = {\n    parse_mode :\"Markdown\",\n  reply_markup: JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"0\",\n            \"callback_data\": \"0\"            \n        },\n        {\n            \"text\": \"25\",\n            \"callback_data\": \"25\"            \n        },\n        {\n            \"text\": \"50\",\n            \"callback_data\": \"50\"            \n        },\n        {\n            \"text\": \"75\",\n            \"callback_data\": \"75\"            \n        },\n        {\n            \"text\": \"100\",\n            \"callback_data\": \"100\"            \n        }\n        ],\n        [{\n            \"text\": \"⛔️CANCEL⛔️\",\n            \"callback_data\": \"CANCEL\" \n            \n        }]]\n  })\n};\n\nvar optsLight = {\n    parse_mode :\"Markdown\",\n  reply_markup: JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"🔆ON\",\n            \"callback_data\": \"on\"            \n        },\n        {\n            \"text\": \"🔅OFF\",\n            \"callback_data\": \"off\"            \n        }],\n        [{\n            \"text\": \"⛔️CANCEL⛔️\",\n            \"callback_data\": \"CANCEL\" \n            \n        }]]\n  })\n};\n\nvar optsEmpty = {\n    parse_mode :\"Markdown\"\n}\n\nvar topic = msg.topic;\nflow.set(\"optionTopic\",topic);\nmsg = flow.get(\"commandMsg\");\n\n\nvar content = global.get(\"currentActuator\");\n\n\nif(content == global.get(\"actuArray\")[0]){\n    currAct = global.get(\"actuArray\")[1] + \" & \"\n                + global.get(\"actuArray\")[2]\n    \n}\nelse if(content == global.get(\"actuArray\")[5]){\n    currAct = global.get(\"actuArray\")[6] + \" & \"\n                + global.get(\"actuArray\")[7]\n}\nelse{\n    currAct = content;\n}\n\nglobal.set(\"actDescription\",currAct)\n\nswitch(topic){\n    \n    case global.get(\"actuArray\")[0]:\n    case global.get(\"actuArray\")[1]:\n    case global.get(\"actuArray\")[2]:\n    case global.get(\"actuArray\")[3]:\n    case global.get(\"actuArray\")[4]:\n        msg.payload.options = optsRoller;\n        msg.payload.content = \"Select the percentage of *\"+ currAct + \"*\";\n        break;\n        \n    case global.get(\"actuArray\")[5]:\n    case global.get(\"actuArray\")[6]:\n    case global.get(\"actuArray\")[7]:\n        msg.payload.options = optsLight;\n        msg.payload.content = \"Select the state of *\"+ currAct + \"*\";\n        break;\n    \n    case global.get(\"actuArray\")[8]:\n        msg.payload.options = optsEmpty;\n        msg.payload.content = \"_...The house is closing..._\";\n        break;\n        \n    case global.get(\"actuArray\")[9]:\n        msg.payload.options = optsEmpty;\n        msg.payload.content = \"_Your request has been canceled_\"\n        break;\n \n}\n\nreturn [msg];\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1900,
        "wires": [
            [
                "93d9c2353ad50893"
            ]
        ]
    },
    {
        "id": "93d9c2353ad50893",
        "type": "telegram sender",
        "z": "c072a6bbe1d49f83",
        "name": "State Inline_Keyboard",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1100,
        "y": 1900,
        "wires": [
            [
                "2fc913e2831a66b8"
            ]
        ]
    },
    {
        "id": "2fc913e2831a66b8",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "save messageId",
        "func": "// We store the messageId to be able to edit this reply in the callback query. \ncontext.flow.options.messageId = msg.payload.sentMessageId;\ncontext.flow.callbackNumber = 7;\n\nmsg.topic = flow.get(\"optionTopic\");\n\nreturn [ msg ];\n",
        "outputs": "1",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 1900,
        "wires": [
            [
                "2ad0971b7992d00b"
            ]
        ]
    },
    {
        "id": "2ad0971b7992d00b",
        "type": "switch",
        "z": "c072a6bbe1d49f83",
        "name": "yesOUT",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "yesOUT",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1460,
        "y": 1900,
        "wires": [
            [
                "d9c893afb3e02ce6"
            ]
        ]
    },
    {
        "id": "466d52f63e756878",
        "type": "telegram command",
        "z": "c072a6bbe1d49f83",
        "name": "🟢START",
        "command": "/start",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "0f5db796f4cf57cf",
        "strict": false,
        "hasresponse": false,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 1,
        "x": 160,
        "y": 440,
        "wires": [
            [
                "2c07568a43274717"
            ]
        ]
    },
    {
        "id": "d9c893afb3e02ce6",
        "type": "link out",
        "z": "c072a6bbe1d49f83",
        "name": "OUT Command",
        "mode": "link",
        "links": [
            "26391628c9df5b65",
            "3d768d86bc38c1f3"
        ],
        "x": 1555,
        "y": 1900,
        "wires": []
    },
    {
        "id": "f532e04d5986f5ad",
        "type": "link out",
        "z": "c072a6bbe1d49f83",
        "name": "OUT Command",
        "mode": "link",
        "links": [
            "26391628c9df5b65",
            "3d768d86bc38c1f3"
        ],
        "x": 1355,
        "y": 1960,
        "wires": []
    },
    {
        "id": "b1811514dff127ca",
        "type": "inject",
        "z": "c072a6bbe1d49f83",
        "name": "Autostart",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 120,
        "wires": [
            [
                "c3446d383202dcfe"
            ]
        ]
    },
    {
        "id": "8995f42a3c26bd11",
        "type": "telegram sender",
        "z": "c072a6bbe1d49f83",
        "name": "On start message",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 790,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "c3446d383202dcfe",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Global Array definitions",
        "func": "var topics = [\n        \"shellies/home/livingroom/yard_roller/roller/0/command/pos\",    //0\n        \"shellies/home/livingroom/road_roller/roller/0/command/pos\",    //1\n        \"shellies/home/bedroom_pietro/roller/roller/0/command/pos\",     //2\n        \"shellies/home/bedroom_pier/roller/roller/0/command/pos\",       //3\n        \"shellies/home/livingroom/lights/relay/1/command\",              //4\n        \"shellies/home/livingroom/lights/relay/0/command\"               //5\n\n];\nglobal.set(\"topicArray\", topics);\n\nvar powerTopics = [\n        \"shellies/home/livingroom/road_roller/roller/0/power\",          //0\n        \"shellies/home/livingroom/yard_roller/roller/0/power\",          //1\n        \"shellies/home/bedroom_pietro/roller/roller/0/power\",           //2\n        \"shellies/home/bedroom_pier/roller/roller/0/power\",             //3\n        \"shellies/home/livingroom/lights/relay/0/power\",                //4\n        \"shellies/home/livingroom/lights/relay/1/power\"                 //5\n        \n];\nglobal.set(\"powerTopics\", powerTopics);\n\n\nvar topicsSub = [\n        \"arduini/home/livingroom/Temperature\",                          //0\n        \"arduini/home/livingroom/Humidity\",                             //1\n        \"arduini/home/livingroom/Brightness\",                           //2\n        \"shellies/home/livingroom/lights/relay/0\",                      //3\n        \"shellies/home/livingroom/lights/relay/1\",                      //4\n        \"shellies/home/livingroom/road_roller/roller/0/pos\",            //5\n        \"shellies/home/livingroom/yard_roller/roller/0/pos\",            //6\n        \"shellies/home/bedroom_pietro/roller/roller/0/pos\",             //7\n        \"shellies/home/bedroom_pier/roller/roller/0/pos\",               //8\n        \"arduini/home/livingroom/Human Presence\",                       //9\n        \"arduini/home/livingroom/Sensors Connection\"                    //10\n]\nglobal.set(\"subTopicArray\", topicsSub);\n\n\nvar topicsMsg = [\n        \"shellies/home/livingroom/lights/relay/0\",                      //0\n        \"shellies/home/livingroom/lights/relay/1\",                      //1\n        \"shellies/home/livingroom/road_roller/roller/0\",                //2\n        \"shellies/home/livingroom/yard_roller/roller/0\",                //3\n        \"shellies/home/bedroom_pietro/roller/roller/0\",                 //4\n        \"shellies/home/bedroom_pier/roller/roller/0\",                   //5\n]\nglobal.set(\"topicsMsg\", topicsMsg);\n\nvar actuators=[\n            \"lrRollerShutter\",      //0\n            \"yardRollerShutter\",    //1\n            \"roadRollerShutter\",    //2\n            \"mainRollerShutter\",    //3\n            \"smallRollerShutter\",   //4\n            \"lrLight\",              //5\n            \"mainLight\",            //6\n            \"ambientLight\",         //7\n            \"yesOUT\",               //8\n            \"CANCEL\"                //9\n\n];\nglobal.set(\"actuArray\", actuators);\n\nvar disc = \"Sensors Disconnected\";\nglobal.set(\"disconn\", disc)\n\nvar admins = [\n    666955686, \n    672996534, \n    -1001593189841\n];\nglobal.set(\"admins\", admins)\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 120,
        "wires": [
            [
                "3beb774aab6c93b5"
            ]
        ]
    },
    {
        "id": "21ab9e35d74d4478",
        "type": "inject",
        "z": "c072a6bbe1d49f83",
        "name": "",
        "props": [],
        "repeat": "120",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "4d259e1bd935b999"
            ]
        ]
    },
    {
        "id": "4d259e1bd935b999",
        "type": "openweathermap",
        "z": "c072a6bbe1d49f83",
        "name": "",
        "wtype": "current",
        "lon": "",
        "lat": "",
        "city": "Milan",
        "country": "Italy",
        "language": "it",
        "x": 290,
        "y": 200,
        "wires": [
            [
                "5247313a1b5e4a72"
            ]
        ]
    },
    {
        "id": "5247313a1b5e4a72",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "External temp from Weather",
        "func": "global.set(\"extTempWeather\", msg.payload.tempc)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "b9228ffcb3577cf2",
        "type": "comment",
        "z": "c072a6bbe1d49f83",
        "name": "Auto Inject",
        "info": "Gestione subscriptions.",
        "x": 60,
        "y": 40,
        "wires": []
    },
    {
        "id": "24d90dbbfac9b0a4",
        "type": "subflow:4f8d97d10d4ce0bd",
        "z": "c072a6bbe1d49f83",
        "name": "",
        "x": 190,
        "y": 2460,
        "wires": []
    },
    {
        "id": "772f57cb7d1aef0d",
        "type": "comment",
        "z": "c072a6bbe1d49f83",
        "name": "COMMANDS THAT ARE NOT VISIBLE ON TELEGRAM",
        "info": "",
        "x": 200,
        "y": 2380,
        "wires": []
    },
    {
        "id": "2d41b6e1a8253f23",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "File Does NOTexist",
        "func": "msg = flow.get(\"deleteMsg\");\n\nmsg.payload.content = \"😱No one is subscribed😱\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n\n",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 2180,
        "wires": [
            [
                "a0ac173eceac8f49"
            ]
        ]
    },
    {
        "id": "a0ac173eceac8f49",
        "type": "telegram sender",
        "z": "c072a6bbe1d49f83",
        "name": "No one on file",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 800,
        "y": 2180,
        "wires": [
            []
        ]
    },
    {
        "id": "6d8860e9f8b67e67",
        "type": "comment",
        "z": "c072a6bbe1d49f83",
        "name": "Reply at /histoty with the ThingSpeak channel",
        "info": "",
        "x": 170,
        "y": 1400,
        "wires": []
    },
    {
        "id": "9288c68ccb22a998",
        "type": "telegram command",
        "z": "c072a6bbe1d49f83",
        "name": "🟡HISTORY",
        "command": "/history",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "0f5db796f4cf57cf",
        "strict": false,
        "hasresponse": false,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 1,
        "x": 170,
        "y": 1500,
        "wires": [
            [
                "f7a145da79c6303a"
            ]
        ]
    },
    {
        "id": "f7a145da79c6303a",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "History request",
        "func": "var message = msg\nflow.set(\"HistoryMsg\", message);\n\nvar name = message.originalMessage.from.first_name;\nvar user = message.originalMessage.from.username;\nvar id = message.originalMessage.from.id;\n\nnode.log(\"Command: \"+ msg.originalMessage.text +\" requested by \"+ user)\n\nvar history = {\n        \"Name\" : name,\n        \"Username\": user,\n        \"chatId\": id\n}\n\nflow.set(\"history\",history);\n\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1500,
        "wires": [
            [
                "46cc3c7fbed112ac"
            ]
        ]
    },
    {
        "id": "ebcecdb8ca66d638",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Check file",
        "func": "const user = flow.get(\"history\");\n\nflow.set(\"Content\", 1)\n\nfor(var i=0; i<3 ; i++){\n    if(user.chatId == global.get(\"admins\")[i]){\n        flow.set(\"alreadySub\", 1);\n        return [msg];\n    }\n}\n\nif(user.Username == msg.payload.Username){\n    flow.set(\"alreadySub\", 1);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"alreadySub\" ,0);\nflow.set(\"Content\", 1);",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1480,
        "wires": [
            [
                "d3b3aefa8aaa304a"
            ]
        ]
    },
    {
        "id": "d3b3aefa8aaa304a",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Already Sub?",
        "func": "msg = flow.get(\"HistoryMsg\");\n\nif(flow.get(\"Retry\") == 1)\n    return;\n\nif(flow.get(\"alreadySub\") == 1){\n    node.log(\"Subscribed\")\n    flow.set(\"Retry\",1);\n    return [msg, null];\n    \n}\nelse if(flow.get(\"alreadySub\") == 0){\n    node.log(\"NOT Subscribed\")\n    flow.set(\"Retry\",1);\n    msg.payload.content = \"Dear \"+flow.get(\"history\").Name +\", you are NOT subscribed!!\\nPlease send a subscription request...\";\n    return [null, msg];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"Retry\", 0);\n",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1480,
        "wires": [
            [
                "5501dc2d2be24a72"
            ],
            [
                "57aff6a21ffa5e06"
            ]
        ]
    },
    {
        "id": "57aff6a21ffa5e06",
        "type": "telegram sender",
        "z": "c072a6bbe1d49f83",
        "name": "Not subscribed",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 980,
        "y": 1500,
        "wires": [
            [
                "c7a4a71db4da9fa0"
            ]
        ]
    },
    {
        "id": "a71dd02821648e5c",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Empty file",
        "func": "msg = flow.get(\"HistoryMsg\");\n\nif(flow.get(\"Content\") == 1){\n    return;\n}\n\nif(flow.get(\"Retry\") == 0){\n    flow.set(\"Retry\",1);\n    msg.payload.content = \"Dear \"+flow.get(\"trying\").Name +\", you are NOT subscribed!!\\nPlease send a subscription request...\";\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"Retry\", 0);",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1520,
        "wires": [
            [
                "519e7c4fd688a3c5"
            ]
        ]
    },
    {
        "id": "ad292461b7cf0c80",
        "type": "link in",
        "z": "c072a6bbe1d49f83",
        "name": "IN Empty Status",
        "links": [
            "519e7c4fd688a3c5"
        ],
        "x": 865,
        "y": 1520,
        "wires": [
            [
                "57aff6a21ffa5e06"
            ]
        ]
    },
    {
        "id": "519e7c4fd688a3c5",
        "type": "link out",
        "z": "c072a6bbe1d49f83",
        "name": "OUT Empty status",
        "mode": "link",
        "links": [
            "ad292461b7cf0c80"
        ],
        "x": 735,
        "y": 1520,
        "wires": []
    },
    {
        "id": "46cc3c7fbed112ac",
        "type": "subflow:662c20e8e73bc9f7",
        "z": "c072a6bbe1d49f83",
        "name": "",
        "x": 500,
        "y": 1500,
        "wires": [
            [
                "ebcecdb8ca66d638"
            ],
            [
                "a71dd02821648e5c"
            ]
        ]
    },
    {
        "id": "5501dc2d2be24a72",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Thingspeak History",
        "func": "msg.payload.content = \"⏳Hello, here is the *ThingSpeak* channel link\"\n          +\"\\n\\n_Here you can find the history of all actuators, including the overall power consumption_\"\n          +\"\\n\\nhttps://thingspeak.com/channels/1813859\"\n\nmsg.payload.options = {parse_mode :\"Markdown\"}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1460,
        "wires": [
            [
                "c61ef6e489b7ddb7"
            ]
        ]
    },
    {
        "id": "c61ef6e489b7ddb7",
        "type": "telegram sender",
        "z": "c072a6bbe1d49f83",
        "name": "Info sender",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1170,
        "y": 1460,
        "wires": [
            [
                "4e66c2f6e6b3043b"
            ]
        ]
    },
    {
        "id": "790dfa2851073546",
        "type": "telegram command",
        "z": "c072a6bbe1d49f83",
        "name": "🟢SUBSCRIBE",
        "command": "/subscribe",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "0f5db796f4cf57cf",
        "strict": false,
        "hasresponse": false,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 1,
        "x": 180,
        "y": 680,
        "wires": [
            [
                "cc2f42478400e2a6"
            ]
        ]
    },
    {
        "id": "cc2f42478400e2a6",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "User Analysis",
        "func": "var message = msg\nglobal.set(\"SubscribeMsg\", message);\n\nconst name = msg.originalMessage.from.first_name;\nconst user = msg.originalMessage.from.username;\nconst id = msg.originalMessage.from.id;\n\nnode.log(\"Command: \"+ msg.originalMessage.text +\" requested by \"+ user)\n \nconst subUser = {\n        \"Name\" : name,\n        \"Username\": user,\n        \"chatId\": id\n}\nglobal.set(\"subUser\",subUser);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"invalid\", 0)",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 680,
        "wires": [
            [
                "b1f73c4fdfa53c6b"
            ]
        ]
    },
    {
        "id": "c002024bd2b14576",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "ADMIN User",
        "func": "node.log(global.get(\"subUser\").Username)\nmsg = global.get(\"SubscribeMsg\");\nmsg.payload.type = 'message';\n\n    msg.payload.content = \"You are an ADMIN👑\\nYou do NOT need subscription\" \n\nif(flow.get(\"sent\") == 0){\n    flow.set(\"sent\",1)\n    return msg;\n}\n\n    ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"sent\",0)",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\n\nflow.set(\"msgsent\", 0);",
        "libs": [],
        "x": 730,
        "y": 660,
        "wires": [
            [
                "d99896b201f05c65"
            ]
        ]
    },
    {
        "id": "fb90eb436ca91d95",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Not on File - Ask Admins",
        "func": "node.log(global.get(\"subUser\").Username)\n\nvar opts = {\n  reply_markup: JSON.stringify({\n    \"inline_keyboard\": [[\n        {\n            \"text\": \"🟩Accept User\",\n            \"callback_data\": \"Accepted\"            \n        },\n        {\n            \"text\": \"🟥Refuse User\",\n            \"callback_data\": \"Refused\"           \n        }]]\n  })\n};\n\nmsg.payload.content = 'Do you want to accept user: '+ global.get(\"subUser\").Username+'?';\nmsg.payload.options = opts;\nmsg.payload.chatId = global.get(\"admins\")[2]\nmsg.payload.type = 'message';\n\n\n\nif (flow.get(\"sent\")==0){\n    flow.set(\"sent\", 1)\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"sent\", 0)\n",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 740,
        "wires": [
            [
                "0fa1dea11e5af916"
            ]
        ]
    },
    {
        "id": "0fa1dea11e5af916",
        "type": "telegram sender",
        "z": "c072a6bbe1d49f83",
        "name": "Admins inline keyboard",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1010,
        "y": 740,
        "wires": [
            [
                "1a78b5291cdfcd97"
            ]
        ]
    },
    {
        "id": "383ac2c64182094e",
        "type": "telegram event",
        "z": "c072a6bbe1d49f83",
        "name": "Admin Decision",
        "bot": "0f5db796f4cf57cf",
        "event": "callback_query",
        "autoanswer": true,
        "x": 180,
        "y": 820,
        "wires": [
            [
                "a72a9ce937b73d3b"
            ]
        ]
    },
    {
        "id": "a72a9ce937b73d3b",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Evaluate Admins decision",
        "func": "if(context.flow.callbackNumber != 1){\n    return;\n}\nnode.warn(global.get(\"subUser\"))\n\nvar cont = msg.payload.content;\n\nif(msg.payload.content){\n    msg.payload.type = 'deleteMessage';\n    msg.payload.content = context.flow.ask_permission\n    context.flow.ask_permission = null;\n    context.flow.callbackNumber = null;\n    msg.topic = cont;\n}\nelse\n{\n    var show_alert = false;\n    msg.payload.options = show_alert;\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 820,
        "wires": [
            [
                "2f01accc29f13ff5"
            ]
        ]
    },
    {
        "id": "1a78b5291cdfcd97",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Save messageId",
        "func": "context.flow.ask_permission = msg.payload.sentMessageId;\ncontext.flow.callbackNumber = 1;\n\n\nmsg = global.get(\"SubscribeMsg\");\nmsg.payload.type = 'message';\n\nmsg.payload.content = \"Admins are evaluating your request\"\n                        +\"\\n...⌛️Wait for response⌛️...\"\n\n\nreturn [ msg ];",
        "outputs": "1",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 740,
        "wires": [
            [
                "8c61dd50bc01a59b"
            ]
        ]
    },
    {
        "id": "2f01accc29f13ff5",
        "type": "telegram sender",
        "z": "c072a6bbe1d49f83",
        "name": "DELETE the inline keyboard",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 640,
        "y": 820,
        "wires": [
            [
                "f90859b53fff0974"
            ]
        ]
    },
    {
        "id": "f90859b53fff0974",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Send feedback to Admins",
        "func": "node.log(msg.topic)\n\nmsg.payload.type = 'message';\n\nif (msg.topic === \"Accepted\"){\n    msg.payload.content = \"You have accepted \"\n            + global.get(\"subUser\").Username\n            +\" as a new user!\"\n\n}\nelse if(msg.topic === \"Refused\"){\n    msg.payload.content = global.get(\"subUser\").Username\n            + \" has been banned\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 820,
        "wires": [
            [
                "9efb16d90ea0890c"
            ]
        ]
    },
    {
        "id": "9efb16d90ea0890c",
        "type": "telegram sender",
        "z": "c072a6bbe1d49f83",
        "name": "Accepted/Refused User",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1130,
        "y": 820,
        "wires": [
            [
                "58a2addbd8b96b64"
            ]
        ]
    },
    {
        "id": "e5c303e51a9470fa",
        "type": "telegram sender",
        "z": "c072a6bbe1d49f83",
        "name": "Accepted/Refused/missingUsername",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 310,
        "y": 900,
        "wires": [
            [
                "70d25f0611ea772b"
            ]
        ]
    },
    {
        "id": "70d25f0611ea772b",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Reset flow variables",
        "func": "flow.set(\"sent\", 0)\nflow.set(\"written\",0)\nflow.set(\"Welcome\", 0)",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "8c61dd50bc01a59b",
        "type": "telegram sender",
        "z": "c072a6bbe1d49f83",
        "name": "Wait msg",
        "bot": "0f5db796f4cf57cf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1400,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "d99896b201f05c65",
        "type": "link out",
        "z": "c072a6bbe1d49f83",
        "name": "OUT Send1",
        "mode": "link",
        "links": [
            "aa619bdb3855b5c0"
        ],
        "x": 835,
        "y": 660,
        "wires": []
    },
    {
        "id": "aa619bdb3855b5c0",
        "type": "link in",
        "z": "c072a6bbe1d49f83",
        "name": "IN Send",
        "links": [
            "d99896b201f05c65",
            "b31ceba3d6f3b5de",
            "5fba4a984d340735",
            "40ce79ead2c527ff"
        ],
        "x": 115,
        "y": 900,
        "wires": [
            [
                "e5c303e51a9470fa"
            ]
        ]
    },
    {
        "id": "b31ceba3d6f3b5de",
        "type": "link out",
        "z": "c072a6bbe1d49f83",
        "name": "OUT Send2",
        "mode": "link",
        "links": [
            "aa619bdb3855b5c0"
        ],
        "x": 1725,
        "y": 860,
        "wires": []
    },
    {
        "id": "b3bbc9685a16d233",
        "type": "file",
        "z": "c072a6bbe1d49f83",
        "name": "Add User to file",
        "filename": "/home/lberna/Desktop/chatId.txt",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1560,
        "y": 780,
        "wires": [
            [
                "f9b84e80c3b41d65"
            ]
        ]
    },
    {
        "id": "dd4aa9a022c99fbb",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Send feedback to User",
        "func": "//msg = global.get(\"SubscribeMsg\");\n\ntopic = msg.topic\nmsg.payload = global.get(\"subUser\");\n\nif (topic === \"Accepted\"){\n    msg.payload.content = \"Welcome \"\n    + global.get(\"subUser\").Name \n    +\" !!!\\nYour request has been accepted by admins\";\n}\nelse if (topic === \"Refused\"){\n    msg.payload.content = \"Sorry \" \n    + global.get(\"subUser\").Name\n    +\" !!\\nYour profile does not respect our guidelines\";\n}\n\nmsg.payload.type = \"message\"\n\nif(flow.get(\"Welcome\") == 0){\n    flow.set(\"Welcome\",1)\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"Welcome\", 0)",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 860,
        "wires": [
            [
                "b31ceba3d6f3b5de"
            ]
        ]
    },
    {
        "id": "58a2addbd8b96b64",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "if Accepted - Add to file",
        "func": "delete msg.payload;\n\nif(msg.topic === \"Accepted\" && flow.get(\"written\") == 0){\n    flow.set(\"written\",1)\n    msg.payload = {\n        \"Name\" : global.get(\"subUser\").Name,\n        \"Username\" : global.get(\"subUser\").Username,\n        \"chatId\" : global.get(\"subUser\").chatId\n    }\n    return [msg, null];\n}\nelse if(msg.topic === \"Refused\"){\n    flow.set(\"written\",0)\n    msg.payload = global.get(\"subUser\");\n    return [null, msg];\n}\n    \n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"sent\",0)\nflow.set(\"written\",0)",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\n\nflow.set(\"msgsent\", 0);",
        "libs": [],
        "x": 1360,
        "y": 820,
        "wires": [
            [
                "b3bbc9685a16d233"
            ],
            [
                "dd4aa9a022c99fbb"
            ]
        ]
    },
    {
        "id": "c1808ad408323828",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Username is missing",
        "func": "node.log(global.get(\"subUser\").Username)\n\nmsg = global.get(\"SubscribeMsg\");\nmsg.payload.type = 'message';\n\nmsg.payload.content = global.get(\"subUser\").Name \n                    + \" please set an USERNAME!!!\";\n\nif(flow.get(\"sent\") == 0){\n    flow.set(\"sent\",1)\n    return msg;\n}\n    ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"sent\",0)",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\n\nflow.set(\"msgsent\", 0);",
        "libs": [],
        "x": 760,
        "y": 620,
        "wires": [
            [
                "5fba4a984d340735"
            ]
        ]
    },
    {
        "id": "5fba4a984d340735",
        "type": "link out",
        "z": "c072a6bbe1d49f83",
        "name": "OUT Send1",
        "mode": "link",
        "links": [
            "aa619bdb3855b5c0"
        ],
        "x": 895,
        "y": 620,
        "wires": []
    },
    {
        "id": "f9b84e80c3b41d65",
        "type": "link out",
        "z": "c072a6bbe1d49f83",
        "name": "OUT Add User",
        "mode": "link",
        "links": [
            "23d581b3de13ab1a"
        ],
        "x": 1675,
        "y": 780,
        "wires": []
    },
    {
        "id": "23d581b3de13ab1a",
        "type": "link in",
        "z": "c072a6bbe1d49f83",
        "name": "IN Add User",
        "links": [
            "f9b84e80c3b41d65"
        ],
        "x": 1435,
        "y": 860,
        "wires": [
            [
                "dd4aa9a022c99fbb"
            ]
        ]
    },
    {
        "id": "b1f73c4fdfa53c6b",
        "type": "subflow:9a353933505ea477",
        "z": "c072a6bbe1d49f83",
        "name": "",
        "x": 540,
        "y": 680,
        "wires": [
            [
                "c1808ad408323828"
            ],
            [
                "c002024bd2b14576"
            ],
            [
                "9ad74276f3431ca8"
            ],
            [
                "fb90eb436ca91d95"
            ]
        ]
    },
    {
        "id": "9ad74276f3431ca8",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "On file User",
        "func": "node.log(global.get(\"subUser\").Username)\n\nmsg = global.get(\"SubscribeMsg\");\nmsg.payload.type = 'message';\n\nmsg.payload.content = \"You were already subscribed\\nWelcome back \"\n                + global.get(\"subUser\").Name + \" !!!\";\n                \nif(flow.get(\"sent\") == 0){\n    flow.set(\"sent\",1)\n    return msg;\n}\n\n    ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"sent\",0)",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\n\nflow.set(\"msgsent\", 0);",
        "libs": [],
        "x": 730,
        "y": 700,
        "wires": [
            [
                "40ce79ead2c527ff"
            ]
        ]
    },
    {
        "id": "40ce79ead2c527ff",
        "type": "link out",
        "z": "c072a6bbe1d49f83",
        "name": "OUT Send1",
        "mode": "link",
        "links": [
            "aa619bdb3855b5c0"
        ],
        "x": 835,
        "y": 700,
        "wires": []
    },
    {
        "id": "c7a4a71db4da9fa0",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Reset",
        "func": "// We store the messageId to be able to edit this reply in the callback query. \nflow.set(\"Retry\", 0);\nflow.set(\"alreadySub\",0);",
        "outputs": "1",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "4e66c2f6e6b3043b",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "Reset",
        "func": "// We store the messageId to be able to edit this reply in the callback query. \nflow.set(\"Retry\", 0);\nflow.set(\"alreadySub\",0);",
        "outputs": "1",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "3beb774aab6c93b5",
        "type": "function",
        "z": "c072a6bbe1d49f83",
        "name": "To Admins Group",
        "func": "msg.payload = {\n    \"chatId\" : global.get(\"admins\")[2],\n    \"type\" : 'message',\n    \"content\" : \"...NodeRed flow is working...\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 120,
        "wires": [
            [
                "8995f42a3c26bd11"
            ]
        ]
    },
    {
        "id": "b44558d1ebd1b497",
        "type": "switch",
        "z": "c072a6bbe1d49f83",
        "name": "!CANCEL",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "CANCEL",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1260,
        "y": 1960,
        "wires": [
            [
                "f532e04d5986f5ad"
            ]
        ]
    },
    {
        "id": "7b8f58cc7a7d35d0",
        "type": "alexa-home",
        "z": "039aea97a5440b0f",
        "conf": "001ce7074b9d1e40",
        "device": "177066",
        "acknoledge": true,
        "name": "Luce Grande",
        "topic": "",
        "x": 150,
        "y": 2360,
        "wires": [
            [
                "6c971a32fb169c9c"
            ]
        ]
    },
    {
        "id": "8d091d5c19d2b70a",
        "type": "alexa-home",
        "z": "039aea97a5440b0f",
        "conf": "001ce7074b9d1e40",
        "device": "177067",
        "acknoledge": true,
        "name": "Luce Piccola",
        "topic": "",
        "x": 150,
        "y": 2440,
        "wires": [
            [
                "009edff349ce90b3"
            ]
        ]
    },
    {
        "id": "05220a538464a8b1",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "SPEGNI LUCE PICCOLA",
        "func": "msg = {};\nmsg.topic = global.get(\"topicArray\")[5]\nmsg.payload = \"off\"\nmsg.qos = 2;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2420,
        "wires": [
            [
                "e59b30421093fa2b"
            ]
        ]
    },
    {
        "id": "7223886c334e3652",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "ACCENDI LUCE PICCOLA",
        "func": "msg = {};\nmsg.topic = global.get(\"topicArray\")[5]\nmsg.payload = \"on\"\nmsg.qos = 2;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 2460,
        "wires": [
            [
                "d36cf5e57f267cf5"
            ]
        ]
    },
    {
        "id": "e021379469c9bf48",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "SPEGNI LUCE GRANDE",
        "func": "var new_msg = {};\nnew_msg.topic = global.get(\"topicArray\")[4]\nnew_msg.payload = \"off\"\nnew_msg.qos = 2;\nreturn new_msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2380,
        "wires": [
            [
                "a2e9a38837d91661"
            ]
        ]
    },
    {
        "id": "30e50507ead7a545",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "ACCENDI LUCE GRANDE",
        "func": "msg = {};\nmsg.topic = global.get(\"topicArray\")[4]\nmsg.payload = \"on\"\nmsg.qos = 2;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 2340,
        "wires": [
            [
                "44b2c4758c4e2eb6"
            ]
        ]
    },
    {
        "id": "6c971a32fb169c9c",
        "type": "switch",
        "z": "039aea97a5440b0f",
        "name": "ON/OFF",
        "property": "command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "TurnOnRequest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "TurnOffRequest",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 300,
        "y": 2360,
        "wires": [
            [
                "30e50507ead7a545"
            ],
            [
                "e021379469c9bf48"
            ]
        ]
    },
    {
        "id": "009edff349ce90b3",
        "type": "switch",
        "z": "039aea97a5440b0f",
        "name": "ON/OFF",
        "property": "command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "TurnOffRequest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "TurnOnRequest",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 300,
        "y": 2440,
        "wires": [
            [
                "05220a538464a8b1"
            ],
            [
                "7223886c334e3652"
            ]
        ]
    },
    {
        "id": "6e0ea68c35c53821",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "CHIUDI TAPPARELLA STRADA",
        "func": "msg = {};\nmsg.topic = global.get(\"topicArray\")[1]\nmsg.payload = \"0\"\nmsg.qos = 2;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 2500,
        "wires": [
            [
                "e6b04c799ac5f156"
            ]
        ]
    },
    {
        "id": "656b861cb850168b",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "APRI TAPPARELLA STRADA",
        "func": "msg = {};\nmsg.topic = global.get(\"topicArray\")[1]\nmsg.payload = \"100\"\nmsg.qos = 2;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 2540,
        "wires": [
            [
                "b5862377583e5744"
            ]
        ]
    },
    {
        "id": "25ccae2d1d5a267a",
        "type": "alexa-home",
        "z": "039aea97a5440b0f",
        "conf": "001ce7074b9d1e40",
        "device": "177075",
        "acknoledge": true,
        "name": "Tapparella Strada",
        "topic": "",
        "x": 160,
        "y": 2540,
        "wires": [
            [
                "a3caadb16d4103f6"
            ]
        ]
    },
    {
        "id": "2ad42599298672bb",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "SETTA TAPPARELLA STRADA",
        "func": "var percentage = msg.payload\nmsg = {};\nmsg.topic = global.get(\"topicArray\")[1]\nmsg.payload = percentage\nmsg.qos = 2;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 2580,
        "wires": [
            [
                "817a1067b2be3ac9"
            ]
        ]
    },
    {
        "id": "a3caadb16d4103f6",
        "type": "switch",
        "z": "039aea97a5440b0f",
        "name": "%",
        "property": "command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "TurnOffRequest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "TurnOnRequest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SetPercentageRequest",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 310,
        "y": 2540,
        "wires": [
            [
                "6e0ea68c35c53821"
            ],
            [
                "656b861cb850168b"
            ],
            [
                "2ad42599298672bb"
            ]
        ]
    },
    {
        "id": "e315f73d1a5777be",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "CHIUDI TAPPARELLA PIETRO",
        "func": "msg = {};\nmsg.topic = global.get(\"topicArray\")[2]\nmsg.payload = \"0\"\nmsg.qos = 2;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 2740,
        "wires": [
            [
                "bdc00fe13c9bc1d0"
            ]
        ]
    },
    {
        "id": "51474af3a23355e7",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "APRI TAPPARELLA PIETRO",
        "func": "msg = {};\nmsg.topic = global.get(\"topicArray\")[2]\nmsg.payload = \"100\"\nmsg.qos = 2;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 2780,
        "wires": [
            [
                "e4f7316e76c188ea"
            ]
        ]
    },
    {
        "id": "5b3bcc1614b6433b",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "SETTA TAPPARELLA PIETRO",
        "func": "var percentage = msg.payload\nmsg = {};\nmsg.topic = global.get(\"topicArray\")[2]\nmsg.payload = percentage\nmsg.qos = 2;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 2820,
        "wires": [
            [
                "5a6f0566cc111a74"
            ]
        ]
    },
    {
        "id": "d5e621822a259684",
        "type": "switch",
        "z": "039aea97a5440b0f",
        "name": "%",
        "property": "command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "TurnOffRequest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "TurnOnRequest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SetPercentageRequest",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 310,
        "y": 2780,
        "wires": [
            [
                "e315f73d1a5777be"
            ],
            [
                "51474af3a23355e7"
            ],
            [
                "5b3bcc1614b6433b"
            ]
        ]
    },
    {
        "id": "28dae0653f4c37f8",
        "type": "alexa-home",
        "z": "039aea97a5440b0f",
        "conf": "001ce7074b9d1e40",
        "device": "177077",
        "acknoledge": true,
        "name": "Tapparella Pietro",
        "topic": "",
        "x": 160,
        "y": 2780,
        "wires": [
            [
                "d5e621822a259684"
            ]
        ]
    },
    {
        "id": "f8299d42f56ff353",
        "type": "comment",
        "z": "039aea97a5440b0f",
        "name": "SHELLIES ALEXA CONTROL",
        "info": "",
        "x": 120,
        "y": 2260,
        "wires": []
    },
    {
        "id": "3b802326c67ea3a3",
        "type": "alexa-home",
        "z": "039aea97a5440b0f",
        "conf": "001ce7074b9d1e40",
        "device": "177082",
        "acknoledge": true,
        "name": "Condizionatore Sala",
        "topic": "",
        "x": 170,
        "y": 3040,
        "wires": [
            [
                "72e1847b1302ed4d"
            ]
        ]
    },
    {
        "id": "72e1847b1302ed4d",
        "type": "switch",
        "z": "039aea97a5440b0f",
        "name": "%",
        "property": "command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "TurnOnRequest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "TurnOffRequest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SetTargetTemperatureRequest",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 330,
        "y": 3040,
        "wires": [
            [
                "4b11267122c1b276"
            ],
            [
                "d42d62d8cdd188fc"
            ],
            [
                "d2e982b2d3659b17"
            ]
        ]
    },
    {
        "id": "4b11267122c1b276",
        "type": "api-call-service",
        "z": "039aea97a5440b0f",
        "name": "TURN ON LIVINGROOM AC",
        "server": "cdfd7fe8c4484812",
        "version": 5,
        "debugenabled": true,
        "domain": "climate",
        "service": "set_hvac_mode",
        "areaId": [
            "soggiorno"
        ],
        "deviceId": [],
        "entityId": [],
        "data": "{\"hvac_mode\" : \"cool\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "all",
        "x": 560,
        "y": 3000,
        "wires": [
            []
        ]
    },
    {
        "id": "d2e982b2d3659b17",
        "type": "api-call-service",
        "z": "039aea97a5440b0f",
        "name": "SET LIVINGROOM AC",
        "server": "cdfd7fe8c4484812",
        "version": 5,
        "debugenabled": true,
        "domain": "climate",
        "service": "set_temperature",
        "areaId": [],
        "deviceId": [
            "f90a415567d890acbfbd27daff51abd8"
        ],
        "entityId": [
            "climate.condizionatore_sala"
        ],
        "data": "{\"temperature\" : msg.payload }",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "all",
        "x": 540,
        "y": 3080,
        "wires": [
            []
        ]
    },
    {
        "id": "d42d62d8cdd188fc",
        "type": "api-call-service",
        "z": "039aea97a5440b0f",
        "name": "TURN OFF LIVINGROOM AC",
        "server": "cdfd7fe8c4484812",
        "version": 5,
        "debugenabled": true,
        "domain": "climate",
        "service": "turn_off",
        "areaId": [],
        "deviceId": [
            "f90a415567d890acbfbd27daff51abd8"
        ],
        "entityId": [
            "climate.condizionatore_sala"
        ],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "all",
        "x": 570,
        "y": 3040,
        "wires": [
            []
        ]
    },
    {
        "id": "830da91cbdc1162a",
        "type": "alexa-home",
        "z": "039aea97a5440b0f",
        "conf": "001ce7074b9d1e40",
        "device": "177083",
        "acknoledge": true,
        "name": "Condizionatore Pietro",
        "topic": "",
        "x": 180,
        "y": 3180,
        "wires": [
            [
                "fcf6ae9ec30c97b0"
            ]
        ]
    },
    {
        "id": "fcf6ae9ec30c97b0",
        "type": "switch",
        "z": "039aea97a5440b0f",
        "name": "%",
        "property": "command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "TurnOnRequest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "TurnOffRequest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SetTargetTemperatureRequest",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 350,
        "y": 3180,
        "wires": [
            [
                "9955b730912056d2"
            ],
            [
                "e453f146c844f2fa"
            ],
            [
                "73b5c0eccf41917f"
            ]
        ]
    },
    {
        "id": "9955b730912056d2",
        "type": "api-call-service",
        "z": "039aea97a5440b0f",
        "name": "TURN ON PIETRO AC",
        "server": "cdfd7fe8c4484812",
        "version": 5,
        "debugenabled": true,
        "domain": "climate",
        "service": "set_hvac_mode",
        "areaId": [
            "pietro"
        ],
        "deviceId": [
            "08398bbb498ee4815a78dcca45f1c225"
        ],
        "entityId": [
            "climate.condizionatore_pietro"
        ],
        "data": "{\"hvac_mode\" : \"cool\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "all",
        "x": 540,
        "y": 3140,
        "wires": [
            []
        ]
    },
    {
        "id": "73b5c0eccf41917f",
        "type": "api-call-service",
        "z": "039aea97a5440b0f",
        "name": "SET PIETRO AC",
        "server": "cdfd7fe8c4484812",
        "version": 5,
        "debugenabled": true,
        "domain": "climate",
        "service": "set_temperature",
        "areaId": [
            "pietro"
        ],
        "deviceId": [],
        "entityId": [],
        "data": "{\"temperature\" : msg.payload }",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "all",
        "x": 530,
        "y": 3220,
        "wires": [
            []
        ]
    },
    {
        "id": "e453f146c844f2fa",
        "type": "api-call-service",
        "z": "039aea97a5440b0f",
        "name": "TURN OFF PIETRO AC",
        "server": "cdfd7fe8c4484812",
        "version": 5,
        "debugenabled": true,
        "domain": "climate",
        "service": "turn_off",
        "areaId": [
            "pietro"
        ],
        "deviceId": [],
        "entityId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "all",
        "x": 550,
        "y": 3180,
        "wires": [
            []
        ]
    },
    {
        "id": "18ce8998310ed8f6",
        "type": "alexa-home",
        "z": "039aea97a5440b0f",
        "conf": "001ce7074b9d1e40",
        "device": "177084",
        "acknoledge": true,
        "name": "Condizionatore Pier",
        "topic": "",
        "x": 170,
        "y": 3320,
        "wires": [
            [
                "8c08050699a406b5"
            ]
        ]
    },
    {
        "id": "8c08050699a406b5",
        "type": "switch",
        "z": "039aea97a5440b0f",
        "name": "%",
        "property": "command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "TurnOnRequest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "TurnOffRequest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SetTargetTemperatureRequest",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 330,
        "y": 3320,
        "wires": [
            [
                "04f37f5758b736ac"
            ],
            [
                "014050bf3c660b7e"
            ],
            [
                "9a9fabb8905539f3"
            ]
        ]
    },
    {
        "id": "04f37f5758b736ac",
        "type": "api-call-service",
        "z": "039aea97a5440b0f",
        "name": "TURN ON PIER AC",
        "server": "cdfd7fe8c4484812",
        "version": 5,
        "debugenabled": true,
        "domain": "climate",
        "service": "set_hvac_mode",
        "areaId": [
            "piervito"
        ],
        "deviceId": [],
        "entityId": [],
        "data": "{\"hvac_mode\" : \"cool\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "all",
        "x": 530,
        "y": 3280,
        "wires": [
            []
        ]
    },
    {
        "id": "9a9fabb8905539f3",
        "type": "api-call-service",
        "z": "039aea97a5440b0f",
        "name": "SET PIER AC",
        "server": "cdfd7fe8c4484812",
        "version": 5,
        "debugenabled": true,
        "domain": "climate",
        "service": "set_temperature",
        "areaId": [
            "piervito"
        ],
        "deviceId": [],
        "entityId": [],
        "data": "{\"temperature\" : msg.payload }",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "all",
        "x": 520,
        "y": 3360,
        "wires": [
            []
        ]
    },
    {
        "id": "014050bf3c660b7e",
        "type": "api-call-service",
        "z": "039aea97a5440b0f",
        "name": "TURN OFF PIER AC",
        "server": "cdfd7fe8c4484812",
        "version": 5,
        "debugenabled": true,
        "domain": "climate",
        "service": "turn_off",
        "areaId": [
            "piervito"
        ],
        "deviceId": [],
        "entityId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "all",
        "x": 540,
        "y": 3320,
        "wires": [
            []
        ]
    },
    {
        "id": "925bec83f70ced6b",
        "type": "mqtt in",
        "z": "039aea97a5440b0f",
        "name": "Temperature",
        "topic": "arduini/home/livingroom/Temperature",
        "qos": "2",
        "datatype": "auto",
        "broker": "2f02e5d0bc36ef68",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 540,
        "wires": [
            [
                "c7433ca853338f49",
                "ee0425443e6a4d8a"
            ]
        ]
    },
    {
        "id": "1c6741546b4838e1",
        "type": "comment",
        "z": "039aea97a5440b0f",
        "name": "SENSORS DATA COLLECTION",
        "info": "",
        "x": 130,
        "y": 280,
        "wires": []
    },
    {
        "id": "e107f1a7556b2a2f",
        "type": "mqtt in",
        "z": "039aea97a5440b0f",
        "name": "Humidity",
        "topic": "arduini/home/livingroom/Humidity",
        "qos": "2",
        "datatype": "auto",
        "broker": "2f02e5d0bc36ef68",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 640,
        "wires": [
            [
                "37930b8ad9f35b60",
                "8e82015190a98cf5"
            ]
        ]
    },
    {
        "id": "fe6c1ac5f2ef72b2",
        "type": "mqtt in",
        "z": "039aea97a5440b0f",
        "name": "MainLight",
        "topic": "shellies/home/livingroom/lights/relay/0",
        "qos": "2",
        "datatype": "auto",
        "broker": "2f02e5d0bc36ef68",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 800,
        "wires": [
            [
                "148b92dc5e232ac2"
            ]
        ]
    },
    {
        "id": "53ac663f29c1f368",
        "type": "mqtt in",
        "z": "039aea97a5440b0f",
        "name": "SmallLight",
        "topic": "shellies/home/livingroom/lights/relay/1",
        "qos": "2",
        "datatype": "auto",
        "broker": "2f02e5d0bc36ef68",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 860,
        "wires": [
            [
                "8262ce47e76b46fb"
            ]
        ]
    },
    {
        "id": "e36efb7294302c86",
        "type": "mqtt in",
        "z": "039aea97a5440b0f",
        "name": "RoadRoller",
        "topic": "shellies/home/livingroom/road_roller/roller/0/pos",
        "qos": "2",
        "datatype": "auto",
        "broker": "2f02e5d0bc36ef68",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 940,
        "wires": [
            [
                "7ab33809aaa6f602",
                "5fffc6486c751dbd"
            ]
        ]
    },
    {
        "id": "5447138c68166c6b",
        "type": "api-call-service",
        "z": "039aea97a5440b0f",
        "name": "LIVINGROOM AC COOL MODE",
        "server": "cdfd7fe8c4484812",
        "version": 5,
        "debugenabled": true,
        "domain": "climate",
        "service": "set_hvac_mode",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "climate.condizionatore_sala"
        ],
        "data": "{\"hvac_mode\" : \"cool\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "all",
        "x": 1650,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "e8b532c383c87376",
        "type": "api-call-service",
        "z": "039aea97a5440b0f",
        "name": "TURN OFF AC",
        "server": "cdfd7fe8c4484812",
        "version": 5,
        "debugenabled": true,
        "domain": "climate",
        "service": "turn_off",
        "areaId": [],
        "deviceId": [
            "f90a415567d890acbfbd27daff51abd8"
        ],
        "entityId": [
            "climate.condizionatore_sala"
        ],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "all",
        "x": 1120,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "aa675f30fccfa813",
        "type": "api-call-service",
        "z": "039aea97a5440b0f",
        "name": "LIVINGROOM AC DRY MODE",
        "server": "cdfd7fe8c4484812",
        "version": 5,
        "debugenabled": true,
        "domain": "climate",
        "service": "set_hvac_mode",
        "areaId": [],
        "deviceId": [
            "f90a415567d890acbfbd27daff51abd8"
        ],
        "entityId": [
            "climate.condizionatore_sala"
        ],
        "data": "{\"hvac_mode\" : \"dry\"}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "all",
        "x": 1650,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "7a0ada0b3a844ba7",
        "type": "api-call-service",
        "z": "039aea97a5440b0f",
        "name": "TURN ON LIVINGROOM AC ",
        "server": "cdfd7fe8c4484812",
        "version": 5,
        "debugenabled": true,
        "domain": "climate",
        "service": "set_temperature",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "climate.condizionatore_sala"
        ],
        "data": "{\"temperature\" : 26}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "all",
        "x": 1160,
        "y": 1800,
        "wires": [
            [
                "22f50c336c684c3a"
            ]
        ]
    },
    {
        "id": "4c53ff7712d98b45",
        "type": "switch",
        "z": "039aea97a5440b0f",
        "name": "ON / OFF",
        "property": "lr_temperature",
        "propertyType": "global",
        "rules": [
            {
                "t": "gt",
                "v": "28",
                "vt": "str"
            },
            {
                "t": "lte",
                "v": "26",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 940,
        "y": 1840,
        "wires": [
            [
                "7a0ada0b3a844ba7"
            ],
            [
                "e8b532c383c87376"
            ],
            [
                "838b24c1f14b5af1"
            ]
        ]
    },
    {
        "id": "22f50c336c684c3a",
        "type": "switch",
        "z": "039aea97a5440b0f",
        "name": "COOL / DRY",
        "property": "lr_humidity",
        "propertyType": "global",
        "rules": [
            {
                "t": "lte",
                "v": "60",
                "vt": "str"
            },
            {
                "t": "gt",
                "v": "60",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1410,
        "y": 1840,
        "wires": [
            [
                "5447138c68166c6b"
            ],
            [
                "aa675f30fccfa813"
            ]
        ]
    },
    {
        "id": "1ee25b09d840d7ee",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "lr_temperature",
        "func": "node.log(\"Received status: \"+ msg.payload)\n\nglobal.set(\"lr_temperature\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "05e15d0fd748a156",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "lr_humidity",
        "func": "node.log(\"Received status: \"+ msg.payload)\n\nglobal.set(\"lr_humidity\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "c7433ca853338f49",
        "type": "rbe",
        "z": "039aea97a5440b0f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 370,
        "y": 540,
        "wires": [
            [
                "1ee25b09d840d7ee"
            ]
        ]
    },
    {
        "id": "37930b8ad9f35b60",
        "type": "rbe",
        "z": "039aea97a5440b0f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 370,
        "y": 640,
        "wires": [
            [
                "05e15d0fd748a156"
            ]
        ]
    },
    {
        "id": "55efb1cd58cc3ab1",
        "type": "comment",
        "z": "039aea97a5440b0f",
        "name": "CONTROL LOGIC",
        "info": "",
        "x": 90,
        "y": 1780,
        "wires": []
    },
    {
        "id": "bec79f1ae713edce",
        "type": "inject",
        "z": "039aea97a5440b0f",
        "name": "Check",
        "props": [],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 1980,
        "wires": [
            [
                "fce4ac1d8a68c16d"
            ]
        ]
    },
    {
        "id": "a0f462810942d360",
        "type": "comment",
        "z": "039aea97a5440b0f",
        "name": "TIME COLLECTION",
        "info": "",
        "x": 90,
        "y": 40,
        "wires": []
    },
    {
        "id": "30f36efdd797c13c",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "lr_ambientlight",
        "func": "node.log(\"Received status: \"+ msg.payload)\n\n\nglobal.set(\"lr_ambientlight\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "148b92dc5e232ac2",
        "type": "rbe",
        "z": "039aea97a5440b0f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 370,
        "y": 800,
        "wires": [
            [
                "30f36efdd797c13c"
            ]
        ]
    },
    {
        "id": "e8b70ed6c7d98183",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "lr_mainlight",
        "func": "node.log(\"Received status: \"+ msg.payload)\n\n\nglobal.set(\"lr_mainlight\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "8262ce47e76b46fb",
        "type": "rbe",
        "z": "039aea97a5440b0f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 370,
        "y": 860,
        "wires": [
            [
                "e8b70ed6c7d98183"
            ]
        ]
    },
    {
        "id": "2a8cad0c1fd18d4d",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "lr_roadroller_pos",
        "func": "node.log(\"Received: \"+ msg.payload)\n\nglobal.set(\"lr_roadroller_pos\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "7ab33809aaa6f602",
        "type": "rbe",
        "z": "039aea97a5440b0f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 370,
        "y": 940,
        "wires": [
            [
                "2a8cad0c1fd18d4d"
            ]
        ]
    },
    {
        "id": "32a679b1bdae7a41",
        "type": "mqtt in",
        "z": "039aea97a5440b0f",
        "name": "YardRoller",
        "topic": "shellies/home/livingroom/yard_roller/roller/0/pos",
        "qos": "2",
        "datatype": "auto",
        "broker": "2f02e5d0bc36ef68",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 1040,
        "wires": [
            [
                "4c554709ee8b174f",
                "607193b8fbeaa758"
            ]
        ]
    },
    {
        "id": "63052e637f354ded",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "lr_yardroller_pos",
        "func": "node.log(\"Received: \"+ msg.payload)\n\nglobal.set(\"lr_yardroller_pos\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "4c554709ee8b174f",
        "type": "rbe",
        "z": "039aea97a5440b0f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 370,
        "y": 1040,
        "wires": [
            [
                "63052e637f354ded"
            ]
        ]
    },
    {
        "id": "30b02141ee1b68b0",
        "type": "switch",
        "z": "039aea97a5440b0f",
        "name": "ON / OFF",
        "property": "lr_mainlight",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "on",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "off",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 940,
        "y": 1980,
        "wires": [
            [
                "791b22042d16c54b"
            ],
            [
                "63204bb528f7550f"
            ]
        ]
    },
    {
        "id": "791b22042d16c54b",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "IF LIGHTS ON",
        "func": "lr_roadroller_pos = global.get(\"lr_roadroller_pos\");\nlr_yardroller_pos = global.get(\"lr_yardroller_pos\");\nMY_HOUR = global.get(\"MY_HOUR\");\n\nif ((lr_roadroller_pos < 40 && lr_yardroller_pos < 40) && MY_HOUR > 8 && MY_HOUR < 18 ){\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 1940,
        "wires": [
            [
                "ae3190cdd9c6ceab"
            ]
        ]
    },
    {
        "id": "63204bb528f7550f",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "IF LIGHTS OFF",
        "func": "lr_brightness = global.get(\"lr_brightness\");\nlr_roadroller_pos = global.get(\"lr_roadroller_pos\");\nlr_yardroller_pos = global.get(\"lr_yardroller_pos\");\nif (lr_brightness < 75){\n    \n    if (lr_roadroller_pos > 80 && lr_yardroller_pos > 80){\n        return [null, msg];\n    }\n    else \n        return [msg, null];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 2020,
        "wires": [
            [
                "3ca02e4149a60738"
            ],
            [
                "ee921c6a599e46ba"
            ]
        ]
    },
    {
        "id": "ae3190cdd9c6ceab",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "OPEN ROLLERS && TURN LIGHTS OFF",
        "func": "msg.qos = 2;\nmsg.payload = 100;\nmsg.topic = global.get(\"topicArray\")[5];\nnode.send(msg);\n\nmsg.qos = 2;\nmsg.payload = 100;\nmsg.topic = global.get(\"topicArray\")[6];\nnode.send(msg);\n\n\nmsg.qos = 2\nmsg.topic = global.get(\"topicArray\")[3];\nmsg.payload = \"off\";\nnode.send(msg);\n\nmsg.qos = 2\nmsg.topic = global.get(\"topicArray\")[4];\nmsg.payload = \"off\";\nnode.send(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 1940,
        "wires": [
            [
                "3f96a4b45a107437"
            ]
        ]
    },
    {
        "id": "3ca02e4149a60738",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "OPEN ROLLERS",
        "func": "msg.qos = 2;\nmsg.payload = 100;\nmsg.topic = global.get(topicArray)[5]; //road roller\nnode.send(msg);\n\nmsg.qos = 2;\nmsg.payload = 100;\nmsg.topic = global.get(topicArray)[6]; //yard roller\nnode.send(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 2000,
        "wires": [
            [
                "7f60d501fa065bc4"
            ]
        ]
    },
    {
        "id": "ee921c6a599e46ba",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "TURN LIGHT ON",
        "func": "msg.qos = 2\nmsg.topic = global.get(\"topicArray\")[4]; //main light\nmsg.payload = \"on\";\nnode.send(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 2040,
        "wires": [
            [
                "ad7a697bcaf7a557"
            ]
        ]
    },
    {
        "id": "364d2e3b0bce54c1",
        "type": "mqtt in",
        "z": "039aea97a5440b0f",
        "name": "Brightness",
        "topic": "arduini/home/livingroom/Brightness",
        "qos": "2",
        "datatype": "auto",
        "broker": "2f02e5d0bc36ef68",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 740,
        "wires": [
            [
                "69e7bdc15eacce42"
            ]
        ]
    },
    {
        "id": "8b220fa11e3e21fc",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "lr_brightness",
        "func": "node.log(\"Received status: \"+ msg.payload)\n\nglobal.set(\"lr_brightness\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "69e7bdc15eacce42",
        "type": "rbe",
        "z": "039aea97a5440b0f",
        "name": "",
        "func": "deadbandEq",
        "gap": "10",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 380,
        "y": 740,
        "wires": [
            [
                "8b220fa11e3e21fc"
            ]
        ]
    },
    {
        "id": "56c64e9eb2c923ae",
        "type": "smooth",
        "z": "039aea97a5440b0f",
        "name": "",
        "property": "payload",
        "action": "mean",
        "count": "5",
        "round": "0",
        "mult": "single",
        "reduce": true,
        "x": 560,
        "y": 580,
        "wires": [
            [
                "8e2fa24978053ae2"
            ]
        ]
    },
    {
        "id": "ee0425443e6a4d8a",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "parseFloat",
        "func": "msg.payload = parseFloat(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 580,
        "wires": [
            [
                "56c64e9eb2c923ae"
            ]
        ]
    },
    {
        "id": "6bc1993eb0146e28",
        "type": "smooth",
        "z": "039aea97a5440b0f",
        "name": "",
        "property": "payload",
        "action": "mean",
        "count": "5",
        "round": "0",
        "mult": "single",
        "reduce": true,
        "x": 560,
        "y": 680,
        "wires": [
            [
                "e7afba3056f98e7b"
            ]
        ]
    },
    {
        "id": "8e82015190a98cf5",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "parseInt",
        "func": "msg.payload = parseInt(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 680,
        "wires": [
            [
                "6bc1993eb0146e28"
            ]
        ]
    },
    {
        "id": "5fffc6486c751dbd",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "parseInt",
        "func": "msg.payload = parseInt(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 980,
        "wires": [
            [
                "8c63129a763af5e6"
            ]
        ]
    },
    {
        "id": "607193b8fbeaa758",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "parseInt",
        "func": "msg.payload = parseInt(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1080,
        "wires": [
            [
                "9cec8ef807b08371"
            ]
        ]
    },
    {
        "id": "8c63129a763af5e6",
        "type": "rbe",
        "z": "039aea97a5440b0f",
        "name": "",
        "func": "narrowbandEq",
        "gap": "1",
        "start": "",
        "inout": "in",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 590,
        "y": 980,
        "wires": [
            [
                "e55ba0590c888a1a"
            ]
        ]
    },
    {
        "id": "9cec8ef807b08371",
        "type": "rbe",
        "z": "039aea97a5440b0f",
        "name": "",
        "func": "narrowbandEq",
        "gap": "1",
        "start": "",
        "inout": "in",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 590,
        "y": 1080,
        "wires": [
            [
                "dc2273496b443043"
            ]
        ]
    },
    {
        "id": "1af07e635e6f7817",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "ThingSpeak Payload",
        "func": "msg.topic = 'channels/1813859/publish'\n\nmsg.payload =\n            'field1='   + flow.get(\"field1\")    //temperature\n            +'&field2=' + flow.get(\"field2\")    //humidity\n            +'&field3=' + flow.get(\"field3\")    //yardroller\n            +'&field4=' + flow.get(\"field4\")    //roadroller\n            +'&field5=' + flow.get(\"field5\")    //main bedroom\n            +'&field6=' + flow.get(\"field6\")    //small bedroom\n            +'&field7=' + flow.get(\"field7\")    //power consumption\n            +'&status=MQTTPUBLISH'\n\nnode.log(msg.topic + \" --> \" + msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1640,
        "wires": [
            [
                "8c47a8c145d5b313"
            ]
        ]
    },
    {
        "id": "dc2273496b443043",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "FLOW_VAR CREATION",
        "func": "flow.set(\"field3\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "e55ba0590c888a1a",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "FLOW_VAR CREATION",
        "func": "flow.set(\"field4\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "8e2fa24978053ae2",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "FLOW_VAR CREATION",
        "func": "flow.set(\"field1\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "08114164ac6d2beb",
        "type": "mqtt in",
        "z": "039aea97a5440b0f",
        "name": "MainBedRoom",
        "topic": "shellies/home/bedroom_pietro/roller/roller/0/pos",
        "qos": "2",
        "datatype": "auto",
        "broker": "2f02e5d0bc36ef68",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 1140,
        "wires": [
            [
                "ea05bf3196b228e1",
                "e53e6bd0d9f97d41"
            ]
        ]
    },
    {
        "id": "43e309a088a2351f",
        "type": "mqtt in",
        "z": "039aea97a5440b0f",
        "name": "SmallBedRoom",
        "topic": "shellies/home/bedroom_pier/roller/roller/0/pos",
        "qos": "2",
        "datatype": "auto",
        "broker": "2f02e5d0bc36ef68",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 1240,
        "wires": [
            [
                "0c1dde7bfa1e7945",
                "14e7a63158d92670"
            ]
        ]
    },
    {
        "id": "e2587e39b602c5d8",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "mainbr_roller_pos",
        "func": "node.log(\"Received: \"+ msg.payload)\n\nglobal.set(\"mainbr_roller_pos\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "ea05bf3196b228e1",
        "type": "rbe",
        "z": "039aea97a5440b0f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 370,
        "y": 1140,
        "wires": [
            [
                "e2587e39b602c5d8"
            ]
        ]
    },
    {
        "id": "0c1dde7bfa1e7945",
        "type": "rbe",
        "z": "039aea97a5440b0f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 370,
        "y": 1240,
        "wires": [
            [
                "769f76c28672b875"
            ]
        ]
    },
    {
        "id": "769f76c28672b875",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "smallbr_roller_pos",
        "func": "node.log(\"Received: \"+ msg.payload)\n\nglobal.set(\"smallbr_roller_pos\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "eb3845e4989a4532",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "CHIUDI TAPPARELLA PIER",
        "func": "msg = {};\nmsg.topic = global.get(\"topicArray\")[3]\nmsg.payload = \"0\"\nmsg.qos = 2;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 2860,
        "wires": [
            [
                "bfbb29b6e3f010d3"
            ]
        ]
    },
    {
        "id": "741515dc6ae4b5b9",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "APRI TAPPARELLA PIER",
        "func": "msg = {};\nmsg.topic = global.get(\"topicArray\")[3]\nmsg.payload = \"100\"\nmsg.qos = 2;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2900,
        "wires": [
            [
                "90c4de42fc75fa0c"
            ]
        ]
    },
    {
        "id": "6af90df6fc0c5152",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "SETTA TAPPARELLA PIER",
        "func": "var percentage = msg.payload\nmsg = {};\nmsg.topic = global.get(\"topicArray\")[3]\nmsg.payload = percentage\nmsg.qos = 2;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 2940,
        "wires": [
            [
                "bdbdfccd5ebadca1"
            ]
        ]
    },
    {
        "id": "d56081e2e09c02de",
        "type": "switch",
        "z": "039aea97a5440b0f",
        "name": "%",
        "property": "command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "TurnOffRequest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "TurnOnRequest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SetPercentageRequest",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 310,
        "y": 2900,
        "wires": [
            [
                "eb3845e4989a4532"
            ],
            [
                "741515dc6ae4b5b9"
            ],
            [
                "6af90df6fc0c5152"
            ]
        ]
    },
    {
        "id": "36d3a66d21e7e5cb",
        "type": "alexa-home",
        "z": "039aea97a5440b0f",
        "conf": "001ce7074b9d1e40",
        "device": "177078",
        "acknoledge": true,
        "name": "Tapparella Pier",
        "topic": "",
        "x": 160,
        "y": 2900,
        "wires": [
            [
                "d56081e2e09c02de"
            ]
        ]
    },
    {
        "id": "e80e8979f69ddf98",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "CHIUDI TAPPARELLA CORTILE",
        "func": "var msg = {};\nmsg.topic = global.get(\"topicArray\")[0]\nmsg.payload = \"0\"\nmsg.qos = 2;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2620,
        "wires": [
            [
                "7c75b31e97c4344c"
            ]
        ]
    },
    {
        "id": "2639b513561df746",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "APRI TAPPARELLA CORTILE",
        "func": "msg = {};\nmsg.topic = global.get(\"topicArray\")[0]\nmsg.payload = \"100\"\nmsg.qos = 2;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 2660,
        "wires": [
            [
                "701ff7b969ef3b3e"
            ]
        ]
    },
    {
        "id": "3dd3a4f47f98030d",
        "type": "alexa-home",
        "z": "039aea97a5440b0f",
        "conf": "001ce7074b9d1e40",
        "device": "177076",
        "acknoledge": true,
        "name": "Tapparella Cortile",
        "topic": "",
        "x": 160,
        "y": 2660,
        "wires": [
            [
                "4cfc60cbb9843ff1"
            ]
        ]
    },
    {
        "id": "b5f9c660e2a798a2",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "SETTA TAPPARELLA CORTILE",
        "func": "var percentage = msg.payload\nmsg = {};\nmsg.topic = global.get(\"topicArray\")[0]\nmsg.payload = percentage\nmsg.qos = 2;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 2700,
        "wires": [
            [
                "f3647b142e7bcdce"
            ]
        ]
    },
    {
        "id": "4cfc60cbb9843ff1",
        "type": "switch",
        "z": "039aea97a5440b0f",
        "name": "%",
        "property": "command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "TurnOffRequest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "TurnOnRequest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SetPercentageRequest",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 310,
        "y": 2660,
        "wires": [
            [
                "e80e8979f69ddf98"
            ],
            [
                "2639b513561df746"
            ],
            [
                "b5f9c660e2a798a2"
            ]
        ]
    },
    {
        "id": "f95df4783e39e6b2",
        "type": "mqtt out",
        "z": "039aea97a5440b0f",
        "g": "52d4d9c1321f5cd4",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "2f02e5d0bc36ef68",
        "x": 1850,
        "y": 2300,
        "wires": []
    },
    {
        "id": "44b2c4758c4e2eb6",
        "type": "link out",
        "z": "039aea97a5440b0f",
        "name": "OUT MQTT ",
        "mode": "link",
        "links": [
            "c493f064016519ed"
        ],
        "x": 715,
        "y": 2340,
        "wires": []
    },
    {
        "id": "a2e9a38837d91661",
        "type": "link out",
        "z": "039aea97a5440b0f",
        "name": "OUT MQTT ",
        "mode": "link",
        "links": [
            "c493f064016519ed"
        ],
        "x": 715,
        "y": 2380,
        "wires": []
    },
    {
        "id": "e59b30421093fa2b",
        "type": "link out",
        "z": "039aea97a5440b0f",
        "name": "OUT MQTT ",
        "mode": "link",
        "links": [
            "c493f064016519ed"
        ],
        "x": 715,
        "y": 2420,
        "wires": []
    },
    {
        "id": "d36cf5e57f267cf5",
        "type": "link out",
        "z": "039aea97a5440b0f",
        "name": "OUT MQTT ",
        "mode": "link",
        "links": [
            "c493f064016519ed"
        ],
        "x": 715,
        "y": 2460,
        "wires": []
    },
    {
        "id": "e6b04c799ac5f156",
        "type": "link out",
        "z": "039aea97a5440b0f",
        "name": "OUT MQTT ",
        "mode": "link",
        "links": [
            "c493f064016519ed"
        ],
        "x": 715,
        "y": 2500,
        "wires": []
    },
    {
        "id": "b5862377583e5744",
        "type": "link out",
        "z": "039aea97a5440b0f",
        "name": "OUT MQTT ",
        "mode": "link",
        "links": [
            "c493f064016519ed"
        ],
        "x": 715,
        "y": 2540,
        "wires": []
    },
    {
        "id": "817a1067b2be3ac9",
        "type": "link out",
        "z": "039aea97a5440b0f",
        "name": "OUT MQTT ",
        "mode": "link",
        "links": [
            "c493f064016519ed"
        ],
        "x": 715,
        "y": 2580,
        "wires": []
    },
    {
        "id": "7c75b31e97c4344c",
        "type": "link out",
        "z": "039aea97a5440b0f",
        "name": "OUT MQTT ",
        "mode": "link",
        "links": [
            "c493f064016519ed"
        ],
        "x": 715,
        "y": 2620,
        "wires": []
    },
    {
        "id": "701ff7b969ef3b3e",
        "type": "link out",
        "z": "039aea97a5440b0f",
        "name": "OUT MQTT ",
        "mode": "link",
        "links": [
            "c493f064016519ed"
        ],
        "x": 715,
        "y": 2660,
        "wires": []
    },
    {
        "id": "f3647b142e7bcdce",
        "type": "link out",
        "z": "039aea97a5440b0f",
        "name": "OUT MQTT ",
        "mode": "link",
        "links": [
            "c493f064016519ed"
        ],
        "x": 715,
        "y": 2700,
        "wires": []
    },
    {
        "id": "bdc00fe13c9bc1d0",
        "type": "link out",
        "z": "039aea97a5440b0f",
        "name": "OUT MQTT ",
        "mode": "link",
        "links": [
            "c493f064016519ed"
        ],
        "x": 715,
        "y": 2740,
        "wires": []
    },
    {
        "id": "e4f7316e76c188ea",
        "type": "link out",
        "z": "039aea97a5440b0f",
        "name": "OUT MQTT ",
        "mode": "link",
        "links": [
            "c493f064016519ed"
        ],
        "x": 715,
        "y": 2780,
        "wires": []
    },
    {
        "id": "5a6f0566cc111a74",
        "type": "link out",
        "z": "039aea97a5440b0f",
        "name": "OUT MQTT ",
        "mode": "link",
        "links": [
            "c493f064016519ed"
        ],
        "x": 715,
        "y": 2820,
        "wires": []
    },
    {
        "id": "bfbb29b6e3f010d3",
        "type": "link out",
        "z": "039aea97a5440b0f",
        "name": "OUT MQTT ",
        "mode": "link",
        "links": [
            "c493f064016519ed"
        ],
        "x": 715,
        "y": 2860,
        "wires": []
    },
    {
        "id": "90c4de42fc75fa0c",
        "type": "link out",
        "z": "039aea97a5440b0f",
        "name": "OUT MQTT ",
        "mode": "link",
        "links": [
            "c493f064016519ed"
        ],
        "x": 715,
        "y": 2900,
        "wires": []
    },
    {
        "id": "bdbdfccd5ebadca1",
        "type": "link out",
        "z": "039aea97a5440b0f",
        "name": "OUT MQTT ",
        "mode": "link",
        "links": [
            "c493f064016519ed"
        ],
        "x": 715,
        "y": 2940,
        "wires": []
    },
    {
        "id": "c493f064016519ed",
        "type": "link in",
        "z": "039aea97a5440b0f",
        "g": "52d4d9c1321f5cd4",
        "name": "IN MQTT",
        "links": [
            "90c4de42fc75fa0c",
            "e6b04c799ac5f156",
            "b5862377583e5744",
            "701ff7b969ef3b3e",
            "5a6f0566cc111a74",
            "44b2c4758c4e2eb6",
            "f3647b142e7bcdce",
            "e4f7316e76c188ea",
            "817a1067b2be3ac9",
            "e59b30421093fa2b",
            "d36cf5e57f267cf5",
            "bdbdfccd5ebadca1",
            "a2e9a38837d91661",
            "7c75b31e97c4344c",
            "bdc00fe13c9bc1d0",
            "bfbb29b6e3f010d3",
            "a7e30217d26e7745",
            "3f96a4b45a107437",
            "78c97c77013a4f22",
            "7f60d501fa065bc4",
            "ad7a697bcaf7a557",
            "35e7c8ec470ecc6d",
            "edbe0b42927018ce",
            "7206a08205cd3879",
            "18e80c1e26540ee4",
            "ea98e1289a3dd7ab"
        ],
        "x": 1545,
        "y": 2300,
        "wires": [
            [
                "df4c0762f9defbd0"
            ]
        ]
    },
    {
        "id": "3f96a4b45a107437",
        "type": "link out",
        "z": "039aea97a5440b0f",
        "name": "OUT MQTT ",
        "mode": "link",
        "links": [
            "c493f064016519ed"
        ],
        "x": 1595,
        "y": 1940,
        "wires": []
    },
    {
        "id": "7f60d501fa065bc4",
        "type": "link out",
        "z": "039aea97a5440b0f",
        "name": "OUT MQTT ",
        "mode": "link",
        "links": [
            "c493f064016519ed"
        ],
        "x": 1455,
        "y": 2000,
        "wires": []
    },
    {
        "id": "ad7a697bcaf7a557",
        "type": "link out",
        "z": "039aea97a5440b0f",
        "name": "OUT MQTT ",
        "mode": "link",
        "links": [
            "c493f064016519ed"
        ],
        "x": 1455,
        "y": 2040,
        "wires": []
    },
    {
        "id": "2969e50886874775",
        "type": "subflow:b5164099a5347bce",
        "z": "039aea97a5440b0f",
        "name": "",
        "x": 190,
        "y": 100,
        "wires": []
    },
    {
        "id": "6747242aac2a73a7",
        "type": "api-current-state",
        "z": "039aea97a5440b0f",
        "name": "State LivingRoom",
        "server": "cdfd7fe8c4484812",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "climate.condizionatore_sala",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "state",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 430,
        "y": 1360,
        "wires": [
            [
                "daf7133989019c8f"
            ]
        ]
    },
    {
        "id": "6e1773c9cf613b7f",
        "type": "inject",
        "z": "039aea97a5440b0f",
        "name": "Automatic trigger",
        "props": [],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "x": 210,
        "y": 1400,
        "wires": [
            [
                "6747242aac2a73a7",
                "49ec83f6ad2dc180",
                "e63b25cc438576f2"
            ]
        ]
    },
    {
        "id": "49ec83f6ad2dc180",
        "type": "api-current-state",
        "z": "039aea97a5440b0f",
        "name": "State Main BR",
        "server": "cdfd7fe8c4484812",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "climate.condizionatore_pietro",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 420,
        "y": 1400,
        "wires": [
            [
                "bf91bff46e5ea19e"
            ]
        ]
    },
    {
        "id": "e63b25cc438576f2",
        "type": "api-current-state",
        "z": "039aea97a5440b0f",
        "name": "State Small Room",
        "server": "cdfd7fe8c4484812",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "climate.condizionatore_pier",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 430,
        "y": 1440,
        "wires": [
            [
                "e33998859e71eddf"
            ]
        ]
    },
    {
        "id": "248ff0d1d73bcee1",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "lr_conditioner_state",
        "func": "node.log(\"Received state: \"+ msg.payload)\n\n\nglobal.set(\"lr_conditioner_state\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "9f65dffa6cb08069",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "mainbr_conditioner_state",
        "func": "node.log(\"Received state: \"+ msg.payload)\n\n\nglobal.set(\"mainbr_conditioner_state\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "897aa3ae42f33fef",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "smallbr_conditioner_state",
        "func": "node.log(\"Received state: \"+ msg.payload)\n\n\nglobal.set(\"smallbr_conditioner_state\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "daf7133989019c8f",
        "type": "rbe",
        "z": "039aea97a5440b0f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 590,
        "y": 1360,
        "wires": [
            [
                "248ff0d1d73bcee1"
            ]
        ]
    },
    {
        "id": "bf91bff46e5ea19e",
        "type": "rbe",
        "z": "039aea97a5440b0f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 590,
        "y": 1400,
        "wires": [
            [
                "9f65dffa6cb08069"
            ]
        ]
    },
    {
        "id": "e33998859e71eddf",
        "type": "rbe",
        "z": "039aea97a5440b0f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 590,
        "y": 1440,
        "wires": [
            [
                "897aa3ae42f33fef"
            ]
        ]
    },
    {
        "id": "43847be1fec26e9c",
        "type": "mqtt in",
        "z": "039aea97a5440b0f",
        "name": "Power Consumptions",
        "topic": "",
        "qos": "2",
        "datatype": "auto",
        "broker": "2f02e5d0bc36ef68",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 560,
        "y": 1520,
        "wires": [
            [
                "e8f33e0b749a4751"
            ]
        ]
    },
    {
        "id": "1d618ceda9ad647b",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "Topic subscription",
        "func": "var topic = 0\nmsg.action = \"subscribe\"\n\nswitch(global.get(\"powerTopics\")[topic]){\n    \n    case global.get(\"powerTopics\")[0]:\n        msg.topic = global.get(\"powerTopics\")[0]\n        node.send(msg);\n        topic ++;\n        \n    case global.get(\"powerTopics\")[1]:\n        msg.topic = global.get(\"powerTopics\")[1]\n        node.send(msg);\n        topic ++;\n        \n        \n    case global.get(\"powerTopics\")[2]:\n        msg.topic = global.get(\"powerTopics\")[2]\n        node.send(msg);\n        topic ++;\n\n    case global.get(\"powerTopics\")[3]:\n        msg.topic = global.get(\"powerTopics\")[3]\n        node.send(msg);\n        topic ++;\n\n    case global.get(\"powerTopics\")[4]:\n        msg.topic = global.get(\"powerTopics\")[4]\n        node.send(msg);\n        topic ++;\n        \n    case global.get(\"powerTopics\")[5]:\n        msg.topic = global.get(\"powerTopics\")[5]\n        node.send(msg);\n        break;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1520,
        "wires": [
            [
                "43847be1fec26e9c"
            ]
        ]
    },
    {
        "id": "28249bfb30bee42e",
        "type": "inject",
        "z": "039aea97a5440b0f",
        "name": "Autostart",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 1520,
        "wires": [
            [
                "1d618ceda9ad647b",
                "d78e19e0dbd8a7a7"
            ]
        ]
    },
    {
        "id": "e8f33e0b749a4751",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "Last measure",
        "func": "var flg = flow.get(\"flg\") || [0,0,0,0,0,0];\nvar meas = flow.get(\"meas\") || [0,0,0,0,0,0];\n\n\nswitch(msg.topic){\n    case global.get(\"powerTopics\")[0]:\n        flow.set(\"power0\",parseFloat(msg.payload))\n        flg[0] = 1;\n        meas[0] = parseFloat(msg.payload);\n        break;\n        \n    case global.get(\"powerTopics\")[1]:\n        flow.set(\"power1\",parseFloat(msg.payload))\n        flg[1] = 1;\n        meas[1] = parseFloat(msg.payload);\n        break;\n        \n    case global.get(\"powerTopics\")[2]:\n        flow.set(\"power2\",parseFloat(msg.payload))\n        flg[2] = 1;\n        meas[2] = parseFloat(msg.payload);\n        break;\n        \n    case global.get(\"powerTopics\")[3]:\n        flow.set(\"power3\",parseFloat(msg.payload))\n        flg[3] = 1;\n        meas[3] = parseFloat(msg.payload);\n        break;\n        \n    case global.get(\"powerTopics\")[4]:\n        flow.set(\"power4\",parseFloat(msg.payload))\n        flg[4] = 1;\n        meas[4] = parseFloat(msg.payload);\n        break;\n        \n    case global.get(\"powerTopics\")[5]:\n        flow.set(\"power5\",parseFloat(msg.payload))\n        flg[5] = 1;\n        meas[5] = parseFloat(msg.payload);\n        break;\n}\n//node.warn(flg);\n\nflow.set(\"flg\", flg);\nflow.set(\"meas\", meas);\nvar check = 1;\nvar sum = 0;\n\nfor(var i=0; i<6 && check; i++){\n    if(flg[i] != 1){\n        check = 0;\n    } \n}\n\nif(check){\n    flow.set(\"flg\", undefined)\n    for(i=0; i<6; i++){\n        sum += meas[i];\n    }\n    msg = {}\n    msg.payload = sum;\n    return msg;\n}\nelse\n    return;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1520,
        "wires": [
            [
                "d714c64b4114f8df"
            ]
        ]
    },
    {
        "id": "e53e6bd0d9f97d41",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "parseInt",
        "func": "msg.payload = parseInt(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1180,
        "wires": [
            [
                "a0deeddd920283a6"
            ]
        ]
    },
    {
        "id": "a0deeddd920283a6",
        "type": "rbe",
        "z": "039aea97a5440b0f",
        "name": "",
        "func": "narrowbandEq",
        "gap": "1",
        "start": "",
        "inout": "in",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 590,
        "y": 1180,
        "wires": [
            [
                "79ac3f614394cabf"
            ]
        ]
    },
    {
        "id": "79ac3f614394cabf",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "FLOW_VAR CREATION",
        "func": "flow.set(\"field5\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "14e7a63158d92670",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "parseInt",
        "func": "msg.payload = parseInt(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1280,
        "wires": [
            [
                "b0891785c0a26fb6"
            ]
        ]
    },
    {
        "id": "b0891785c0a26fb6",
        "type": "rbe",
        "z": "039aea97a5440b0f",
        "name": "",
        "func": "narrowbandEq",
        "gap": "1",
        "start": "",
        "inout": "in",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 590,
        "y": 1280,
        "wires": [
            [
                "43011d3679e5924b"
            ]
        ]
    },
    {
        "id": "43011d3679e5924b",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "FLOW_VAR CREATION",
        "func": "flow.set(\"field6\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "e7afba3056f98e7b",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "FLOW_VAR CREATION",
        "func": "flow.set(\"field2\", msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "d714c64b4114f8df",
        "type": "smooth",
        "z": "039aea97a5440b0f",
        "name": "",
        "property": "payload",
        "action": "max",
        "count": "2",
        "round": "",
        "mult": "single",
        "reduce": false,
        "x": 920,
        "y": 1520,
        "wires": [
            [
                "4fac85adb07459aa"
            ]
        ]
    },
    {
        "id": "4fac85adb07459aa",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "Power consumption",
        "func": "node.log(\"Calculated: \"+ msg.payload)\n\n\nflow.set(\"field7\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "8c47a8c145d5b313",
        "type": "mqtt out",
        "z": "039aea97a5440b0f",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "a69fcae04a14d171",
        "x": 570,
        "y": 1640,
        "wires": []
    },
    {
        "id": "3d768d86bc38c1f3",
        "type": "link in",
        "z": "039aea97a5440b0f",
        "name": "IN Command",
        "links": [
            "f532e04d5986f5ad",
            "d9c893afb3e02ce6"
        ],
        "x": 135,
        "y": 220,
        "wires": [
            [
                "5122b3f3d54bcfd7"
            ]
        ]
    },
    {
        "id": "c256e8dc86fa3e4f",
        "type": "comment",
        "z": "039aea97a5440b0f",
        "name": "/Command from Telegram",
        "info": "",
        "x": 110,
        "y": 160,
        "wires": []
    },
    {
        "id": "5122b3f3d54bcfd7",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "Command sent by Telegram",
        "func": "msg = {};\nmsg.payload = {\n    \"group\" : global.get(\"currentGroup\"),\n    \"actuator\" : global.get(\"currentActuator\"),\n    \"option\" : global.get(\"currentOption\")        //Quando esci di casa non i sono opzioni aggiunte (=null)\n}\n//node.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 220,
        "wires": [
            [
                "8fc6313594d9b254"
            ]
        ]
    },
    {
        "id": "8fc6313594d9b254",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "Topic making",
        "func": "msg.qos = 2;\nvar option = msg.payload.option;\n\nswitch(msg.payload.actuator){\n    \n    case global.get(\"actuArray\")[0]:                //lrRollerShutter\n        msg.topic = global.get(\"topicArray\")[1]; //road_roller\n        msg.payload = option;\n        node.send([msg,null]);\n\n    case global.get(\"actuArray\")[1]:            //yardRollerShutter\n        msg.topic = global.get(\"topicArray\")[0]; //yard_roller\n        msg.payload = option;\n        node.send([msg,null]);\n        break;\n        \n    case global.get(\"actuArray\")[2]:            //roadRollerShutter\n        msg.topic = global.get(\"topicArray\")[1]; //road_roller\n        msg.payload = option;\n        node.send([msg,null]);\n        break;                                  \n        \n    case global.get(\"actuArray\")[3]:            //mainRollerShutter\n        msg.topic = global.get(\"topicArray\")[2]; //pietro_roller\n        msg.payload = option;\n        node.send([msg,null]);\n        break;\n        \n    case global.get(\"actuArray\")[4]:            //smallRollerShutter\n        msg.topic = global.get(\"topicArray\")[3]; //pier_roller\n        msg.payload = option;\n        node.send([msg,null]);\n        break;                              \n    \n    case global.get(\"actuArray\")[5]:            //lrLight\n        msg.topic = global.get(\"topicArray\")[5]; //ambient_light\n        msg.payload = option;\n        node.send([msg,null]);\n    \n    case global.get(\"actuArray\")[6]:            //mainLight\n        msg.topic = global.get(\"topicArray\")[4]; //main_light\n        msg.payload = option;\n        node.send([msg,null]);\n        break;\n        \n    case global.get(\"actuArray\")[7]:            //ambientLight\n        msg.topic = global.get(\"topicArray\")[5]; //ambient_light\n        msg.payload = option;\n        node.send([msg,null]);\n        break;\n\n    case global.get(\"actuArray\")[8]:            //yesOUT\n        global.set(\"goOut\", 1);\n\n        for(var i = 0; i<global.get(\"topicArray\").length-2; i++){\n            msg.topic = global.get(\"topicArray\")[i];\n            msg.payload = \"0\"\n            node.send([msg,null]);\n        }\n        for( ; i<global.get(\"topicArray\").length; i++){\n            msg.topic = global.get(\"topicArray\")[i];\n            msg.payload = \"off\"\n            node.send([msg,null]);\n        }\n        msg.topic = global.get(\"subTopicArray\")[9]\n        msg.payload = 0\n        node.send(msg,null);\n        \n        const msg1 = {};\n        msg1.payload = {};\n        node.send([null,msg1]);\n        break;\n}\n\n\n\n\n\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 220,
        "wires": [
            [
                "edbe0b42927018ce"
            ],
            [
                "395861ef54d1843d"
            ]
        ]
    },
    {
        "id": "395861ef54d1843d",
        "type": "api-call-service",
        "z": "039aea97a5440b0f",
        "name": "TURN OFF CONDITIONERS",
        "server": "cdfd7fe8c4484812",
        "version": 5,
        "debugenabled": true,
        "domain": "climate",
        "service": "turn_off",
        "areaId": [
            "piervito",
            "pietro",
            "soggiorno"
        ],
        "deviceId": [],
        "entityId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "all",
        "x": 730,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "edbe0b42927018ce",
        "type": "link out",
        "z": "039aea97a5440b0f",
        "name": "OUT MQTT ",
        "mode": "link",
        "links": [
            "c493f064016519ed"
        ],
        "x": 625,
        "y": 200,
        "wires": []
    },
    {
        "id": "2b5357b669d0adc8",
        "type": "mqtt in",
        "z": "039aea97a5440b0f",
        "name": "Human Presence",
        "topic": "arduini/home/livingroom/Human Presence",
        "qos": "2",
        "datatype": "auto",
        "broker": "2f02e5d0bc36ef68",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 480,
        "wires": [
            [
                "e2b9a2d20319caa5"
            ]
        ]
    },
    {
        "id": "e2b9a2d20319caa5",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "lr_humanPresence",
        "func": "node.log(\"Received[(0)No_pres, (1)pres]: \"+ msg.payload)\n\n\nmsg.payload = parseInt(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 480,
        "wires": [
            [
                "043ba713780e82ec"
            ]
        ]
    },
    {
        "id": "043ba713780e82ec",
        "type": "file",
        "z": "039aea97a5440b0f",
        "name": "Presence",
        "filename": "/home/lberna/Desktop/presence.txt",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 580,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "13ecf37293ac80e9",
        "type": "file in",
        "z": "039aea97a5440b0f",
        "name": "Presence",
        "filename": "/home/lberna/Desktop/presence.txt",
        "format": "lines",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 480,
        "y": 1980,
        "wires": [
            [
                "4133430bc2c9c270"
            ]
        ]
    },
    {
        "id": "7c894aaa1b7ce15e",
        "type": "switch",
        "z": "039aea97a5440b0f",
        "name": "IN",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 1980,
        "wires": [
            [
                "4c53ff7712d98b45",
                "30b02141ee1b68b0"
            ],
            [
                "f444b26f68a506a9"
            ]
        ]
    },
    {
        "id": "838b24c1f14b5af1",
        "type": "link out",
        "z": "039aea97a5440b0f",
        "name": "OUT Cool/Dry",
        "mode": "link",
        "links": [
            "2544b43b5c8fd04e"
        ],
        "x": 1065,
        "y": 1880,
        "wires": []
    },
    {
        "id": "2544b43b5c8fd04e",
        "type": "link in",
        "z": "039aea97a5440b0f",
        "name": "IN Cool/Dry",
        "links": [
            "838b24c1f14b5af1"
        ],
        "x": 1265,
        "y": 1880,
        "wires": [
            [
                "22f50c336c684c3a"
            ]
        ]
    },
    {
        "id": "e15792d4c5e533fc",
        "type": "inject",
        "z": "039aea97a5440b0f",
        "name": "Autostart",
        "props": [],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "",
        "x": 190,
        "y": 1640,
        "wires": [
            [
                "1af07e635e6f7817"
            ]
        ]
    },
    {
        "id": "f444b26f68a506a9",
        "type": "api-call-service",
        "z": "039aea97a5440b0f",
        "name": "TURN OFF AC",
        "server": "cdfd7fe8c4484812",
        "version": 5,
        "debugenabled": false,
        "domain": "climate",
        "service": "turn_off",
        "areaId": [],
        "deviceId": [
            "f90a415567d890acbfbd27daff51abd8"
        ],
        "entityId": [
            "climate.condizionatore_sala"
        ],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "all",
        "x": 960,
        "y": 2120,
        "wires": [
            [
                "ebb0ade591ad15a6"
            ]
        ]
    },
    {
        "id": "ebb0ade591ad15a6",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "TURN LIGHTS OFF",
        "func": "msg = {}\n\nmsg.qos = 2\nmsg.topic = global.get(\"topicArray\")[3];\nmsg.payload = \"off\";\nnode.send(msg);\n\nmsg.qos = 2\nmsg.topic = global.get(\"topicArray\")[4];\nmsg.payload = \"off\";\nnode.send(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 2120,
        "wires": [
            [
                "7206a08205cd3879"
            ]
        ]
    },
    {
        "id": "7206a08205cd3879",
        "type": "link out",
        "z": "039aea97a5440b0f",
        "name": "OUT MQTT ",
        "mode": "link",
        "links": [
            "c493f064016519ed"
        ],
        "x": 1295,
        "y": 2120,
        "wires": []
    },
    {
        "id": "4133430bc2c9c270",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "trim",
        "func": "if(msg.payload == \"\\n\" || msg.payload == \"\\r\" || msg.payload == \"\" ){\n    return;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1980,
        "wires": [
            [
                "7c894aaa1b7ce15e"
            ]
        ]
    },
    {
        "id": "1716143a7683af25",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "Connection topic checking",
        "func": "msg.qos = 2;\nmsg.topic = global.get(\"subTopicArray\")[10];\nmsg.payload = global.get(\"disconn\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 340,
        "wires": [
            [
                "18e80c1e26540ee4"
            ]
        ]
    },
    {
        "id": "18e80c1e26540ee4",
        "type": "link out",
        "z": "039aea97a5440b0f",
        "name": "OUT MQTT ",
        "mode": "link",
        "links": [
            "c493f064016519ed"
        ],
        "x": 515,
        "y": 340,
        "wires": []
    },
    {
        "id": "a4e918e5d3613199",
        "type": "inject",
        "z": "039aea97a5440b0f",
        "name": "",
        "props": [],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "300",
        "topic": "",
        "x": 190,
        "y": 340,
        "wires": [
            [
                "1716143a7683af25"
            ]
        ]
    },
    {
        "id": "6f4c47d34c310a7d",
        "type": "mqtt in",
        "z": "039aea97a5440b0f",
        "name": "Sensors Connection",
        "topic": "arduini/home/livingroom/Sensors Connection",
        "qos": "2",
        "datatype": "auto",
        "broker": "2f02e5d0bc36ef68",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 400,
        "wires": [
            [
                "ddda50e5b44ee9c2"
            ]
        ]
    },
    {
        "id": "ddda50e5b44ee9c2",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "lr_connection",
        "func": "node.log(\"Received status: \"+ msg.payload)\n\nif(msg.payload !== global.get(\"disconn\")){\n    flow.set(\"disCount\", 0);\n    global.set(\"lr_connection\", msg.payload);\n}\nelse{\n    \n    var count = flow.get(\"disCount\") || 0;\n    flow.set(\"disCount\", ++count);\n    \n    if(flow.get(\"disCount\") >= 3){\n        node.warn(\"DISCONNECTED Sensors\")\n        global.set(\"lr_connection\", global.get(\"disconn\"));\n        flow.set(\"disCount\", 0);\n        msg = {}\n        msg.topic = global.get(\"subTopicArray\")[9];\n        msg.payload = 0;\n        node.send(msg);\n    }\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 400,
        "wires": [
            [
                "ea98e1289a3dd7ab"
            ]
        ]
    },
    {
        "id": "ea98e1289a3dd7ab",
        "type": "link out",
        "z": "039aea97a5440b0f",
        "name": "OUT MQTT ",
        "mode": "link",
        "links": [
            "c493f064016519ed"
        ],
        "x": 495,
        "y": 400,
        "wires": []
    },
    {
        "id": "d78e19e0dbd8a7a7",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "Messages subscription",
        "func": "var i = 0\nmsg.action = \"subscribe\"\nmsg.qos = 2;\n\nswitch(global.get(\"topicsMsg\")[i]){\n    \n    case global.get(\"topicsMsg\")[0]:\n        msg.topic = global.get(\"topicsMsg\")[0]\n        node.send(msg);\n        i ++;\n        \n    case global.get(\"topicsMsg\")[1]:\n        msg.topic = global.get(\"topicsMsg\")[1]\n        node.send(msg);\n        i ++;\n        \n        \n    case global.get(\"topicsMsg\")[2]:\n        msg.topic = global.get(\"topicsMsg\")[2]\n        node.send(msg);\n        i ++;\n\n    case global.get(\"topicsMsg\")[3]:\n        msg.topic = global.get(\"topicsMsg\")[3]\n        node.send(msg);\n        i ++;\n\n    case global.get(\"topicsMsg\")[4]:\n        msg.topic = global.get(\"topicsMsg\")[4]\n        node.send(msg);\n        i ++;\n        \n    case global.get(\"topicsMsg\")[5]:\n        msg.topic = global.get(\"topicsMsg\")[5]\n        node.send(msg);\n        break;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1560,
        "wires": [
            [
                "d2328638e7602992"
            ]
        ]
    },
    {
        "id": "69942661c572d1b6",
        "type": "switch",
        "z": "039aea97a5440b0f",
        "name": "",
        "property": "goOut",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 770,
        "y": 1560,
        "wires": [
            [
                "773fb83650b84612"
            ]
        ]
    },
    {
        "id": "d2328638e7602992",
        "type": "mqtt in",
        "z": "039aea97a5440b0f",
        "name": "Messages from Actuator",
        "topic": "",
        "qos": "2",
        "datatype": "auto",
        "broker": "2f02e5d0bc36ef68",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 590,
        "y": 1560,
        "wires": [
            [
                "69942661c572d1b6"
            ]
        ]
    },
    {
        "id": "773fb83650b84612",
        "type": "function",
        "z": "039aea97a5440b0f",
        "name": "Reset goOut",
        "func": "\nif(msg.payload !== \"stop\" && msg.payload !== \"close\" && msg.payload !== \"off\")\n    global.set(\"goOut\", 0);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "fce4ac1d8a68c16d",
        "type": "switch",
        "z": "039aea97a5440b0f",
        "name": "goOut check",
        "property": "goOut",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 330,
        "y": 1980,
        "wires": [
            [
                "13ecf37293ac80e9"
            ]
        ]
    },
    {
        "id": "df4c0762f9defbd0",
        "type": "function",
        "z": "039aea97a5440b0f",
        "g": "52d4d9c1321f5cd4",
        "name": "broker (2.230.199.15)",
        "func": "node.log(\"Sent to: \" + msg.topic + \" --> \"+ msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 2300,
        "wires": [
            [
                "f95df4783e39e6b2"
            ]
        ]
    }
]